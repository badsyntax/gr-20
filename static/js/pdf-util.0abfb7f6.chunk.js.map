{"version":3,"sources":["util/pdf.ts"],"names":["exportMapToPDF","map","pdf","a","format","resolution","reset","extent","onBeforeRender","context","Promise","resolve","jsPDF","undefined","dim","PDFDims","size","getSize","defaultExtent","getView","calculateExtent","width","Math","round","height","printSize","viewResolution","getResolution","once","mapCanvas","document","createElement","mapContext","getContext","Array","prototype","forEach","call","querySelectorAll","canvas","opacity","parentNode","style","globalAlpha","Number","matrix","transform","match","split","CanvasRenderingContext2D","setTransform","apply","drawImage","data","toDataURL","addImage","setSize","fit","setResolution","addPDFTextToCanvas","feature","nextFeature","font","fillStyle","shadowColor","shadowBlur","lineWidth","fillText","getProperties","name","getMultiStagePDF","stageFeatures","onLoadStart","onLoadEnd","features","slice","i","boundingExtent","getGeometry","getCoordinates","length","addPage","getCurrentViewPDF"],"mappings":"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","file":"static/js/pdf-util.0abfb7f6.chunk.js","sourcesContent":["import jsPDF from 'jspdf';\nimport { boundingExtent, Extent } from 'ol/extent';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport SimpleGeometry from 'ol/geom/SimpleGeometry';\nimport { default as OLMap } from 'ol/Map';\nimport { Size } from 'ol/size';\nimport { PDFDims } from './constants';\nimport { PDFFormat } from './types';\n\nexport const exportMapToPDF = async (\n  map: OLMap,\n  pdf?: jsPDF,\n  format: PDFFormat = 'a4',\n  resolution = 150,\n  reset = true,\n  extent: SimpleGeometry | Extent | null = null,\n  onBeforeRender = (context: HTMLCanvasElement) => undefined\n): Promise<jsPDF> =>\n  new Promise(async (resolve) => {\n    if (!pdf) {\n      pdf = new jsPDF('landscape', undefined, format);\n    }\n    const dim = PDFDims[format];\n    const size = map.getSize();\n    const defaultExtent = map.getView().calculateExtent(size);\n    const width = Math.round((dim[0] * resolution) / 25.4);\n    const height = Math.round((dim[1] * resolution) / 25.4);\n    const printSize: Size = [width, height];\n    const viewResolution = map.getView().getResolution();\n\n    map.once('rendercomplete', () => {\n      const mapCanvas = document.createElement('canvas');\n      mapCanvas.width = width;\n      mapCanvas.height = height;\n      const mapContext = mapCanvas.getContext('2d');\n      if (mapContext) {\n        Array.prototype.forEach.call(\n          document.querySelectorAll('.ol-layer canvas'),\n          function (canvas) {\n            if (canvas.width > 0) {\n              const opacity = canvas.parentNode.style.opacity;\n              mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\n              const transform = canvas.style.transform;\n              // Get the transform parameters from the style's transform matrix\n              const matrix = transform\n                .match(/^matrix\\(([^(]*)\\)$/)[1]\n                .split(',')\n                .map(Number);\n              // Apply the transform to the export map context\n              CanvasRenderingContext2D.prototype.setTransform.apply(\n                mapContext,\n                matrix\n              );\n              mapContext.drawImage(canvas, 0, 0);\n            }\n          }\n        );\n        onBeforeRender(mapCanvas);\n        const data = mapCanvas.toDataURL('image/jpeg');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (pdf as jsPDF)?.addImage(data, 'JPEG', 0, 0, dim[0], dim[1]);\n      }\n      if (reset) {\n        map.setSize(size);\n        map.getView().fit(extent || defaultExtent, { size });\n        map.getView().setResolution(viewResolution);\n      }\n      resolve(pdf);\n    });\n\n    map.setSize(printSize);\n    map.getView().fit(extent || defaultExtent, { size: printSize });\n  });\n\nexport const addPDFTextToCanvas = (\n  canvas: HTMLCanvasElement,\n  feature: Feature<Point>,\n  nextFeature: Feature<Point>\n): void => {\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return;\n  }\n\n  context.font = '16px Arial';\n\n  context.fillStyle = 'black';\n  context.shadowColor = 'black';\n  context.shadowBlur = 7;\n  context.lineWidth = 5;\n\n  context.fillText(\n    '© OpenStreetMap contributors © koenverhoeven on Wikiloc ',\n    6,\n    canvas.height - 4\n  );\n\n  context.shadowBlur = 0;\n  context.fillStyle = 'white';\n  context.fillText(\n    '© OpenStreetMap contributors © koenverhoeven on Wikiloc ',\n    5,\n    canvas.height - 5\n  );\n\n  context.shadowBlur = 0;\n  context.fillStyle = 'white';\n  context.fillText(\n    `${feature.getProperties().name} to ${nextFeature.getProperties().name}`,\n    5,\n    20\n  );\n};\n\nexport const getMultiStagePDF = async (\n  map: OLMap,\n  format: PDFFormat,\n  resolution: number,\n  stageFeatures: Feature<Point>[],\n  onLoadStart: () => void,\n  onLoadEnd: () => void\n): Promise<jsPDF | undefined> => {\n  const features = stageFeatures.slice(0, -1);\n  onLoadStart();\n  let pdf: jsPDF | undefined = undefined;\n  for (let i = 0; i < features.length; i++) {\n    const extent = boundingExtent([\n      stageFeatures[i].getGeometry().getCoordinates(),\n      stageFeatures[i + 1].getGeometry().getCoordinates(),\n    ]);\n\n    pdf = await exportMapToPDF(\n      map,\n      pdf,\n      format,\n      resolution,\n      false,\n      extent,\n      (canvas) => {\n        addPDFTextToCanvas(canvas, stageFeatures[i], stageFeatures[i + 1]);\n        return undefined;\n      }\n    );\n    if (i < stageFeatures.length - 2) {\n      pdf.addPage();\n    }\n  }\n  onLoadEnd();\n  return pdf;\n};\n\nexport const getCurrentViewPDF = async (\n  map: OLMap,\n  format: PDFFormat,\n  resolution: number,\n  onLoadStart: () => void,\n  onLoadEnd: () => void\n): Promise<jsPDF> => {\n  onLoadStart();\n  const size = map.getSize();\n  const extent = map.getView().calculateExtent(size);\n  const pdf = await exportMapToPDF(\n    map,\n    undefined,\n    format,\n    resolution,\n    false,\n    extent\n  );\n  onLoadEnd();\n  return pdf;\n};\n"],"sourceRoot":""}