{"version":3,"sources":["util/util.ts","util/constants.ts","components/ControlButtons/ControlButton/ControlButton.module.scss","components/Popup/PointData/PointData.module.scss","components/MapPage/MapPage.module.scss","components/DropdownGroup/DropdownGroup.module.scss","components/Map/Map.module.scss","components/MapControls/MapControls.module.scss","components/Popup/Popup.module.scss","components/Popup/PopupBody/PopupBody.module.scss","components/Popup/PopupFooter/PopupFooter.module.scss","components/GpxLayer/GpxSource.tsx","components/GpxLayer/styles.ts","components/GpxLayer/GpxLayer.tsx","components/ControlButtons/ControlButton/ControlButton.tsx","components/Form/Form.tsx","components/ControlButtons/DownloadControlButton/DownloadControlButton.tsx","components/ControlButtons/MyLocationControlButton/baseline-my_location-24px-yellow.svg","components/ControlButtons/MyLocationControlButton/MyLocationControlButton.tsx","components/ControlButtons/PdfExportControlButton/PdfExportControlButton.tsx","components/ControlButtons/ZoomToExtentControlButton/ZoomToExtentControlButton.tsx","components/MapControls/controls.ts","components/MapControls/MapControls.tsx","components/ControlButtons/CloseControlButton/CloseControlButton.tsx","components/ControlButtons/ZoomInControlButton/ZoomInControlButton.tsx","components/ControlButtons/Google360ControlButton/360-24px.svg","components/ControlButtons/Google360ControlButton/Google360ControlButton.tsx","components/ControlButtons/NextPointControlButton/NextPointControlButton.tsx","components/ControlButtons/PrevPointControlButton/PrevPointControlButton.tsx","components/Popup/PopupFooter/PopupFooter.tsx","components/Popup/NextPointData/NextPointData.tsx","components/Popup/PointData/PointData.tsx","components/Popup/PopupBody/PopupBody.tsx","components/Popup/PopupContent/PopupContent.tsx","components/Popup/Popup.tsx","components/Popup/constants.ts","components/StartEndLayer/baseline-location_on-24px-yellow.svg","components/StartEndLayer/StartEndLayer.tsx","components/TileLayer/TileLayer.tsx","components/Map/Map.tsx","components/Dropdown/Dropdown.tsx","components/DropdownGroup/DropdownGroup.tsx","components/Settings/settingsOptions.ts","components/Settings/Settings.tsx","components/MapPage/MapPage.tsx"],"names":["MULTI_LINE_STRING","GeometryType","POINT","getElevation","coordinate","Math","round","getDataFromCoords","coords","lonLat","toLonLat","hdms","toStringHDMS","getHDMS","elevation","getNextFeature","feature","sortedPointFeatures","sortedPointIndex","indexOf","getPrevFeature","getMultiCoordsFromNextFeature","nextFeature","gpxVectorLayer","multiLine","getMultiLineStringFeature","getSource","getFeatures","Error","multiLineCoords","getGeometry","getCoordinates","featureIndex","getFeatureIndexInMultiLine","nextFeatureIndex","multiCoords","data","reduce","accumulator","currentValue","i","length","nextValue","distance","LineString","getLength","currentElevation","elevationGainDown","abs","elevationGainUp","distanceInKm","toFixed","getDataFromMultiCoords","slice","getLayerById","map","id","getLayers","getArray","find","layer","get","features","getType","getPointFeatures","filter","closestPointInMultiLine","getClosestPoint","findIndex","coord","getSortedPointFeatures","vectorSource","points","point","featurePoint","index","sort","a","b","PDF_OPTION_ALL","PDF_OPTION_CURRENT","PDFDims","a0","a1","a2","a3","a4","a5","module","exports","GpxSource","memo","gpxUrl","vectorLayer","onReady","dispatch","useDispatch","useEffect","showSpinner","format","GPX","readExtensions","extensionsNode","Array","from","getElementsByTagName","forEach","node","name","getAttribute","text","textContent","setProperties","source","VectorSource","url","setSource","once","getState","STATE","READY","hideSpinner","dispose","styles","Point","Style","image","Circle","fill","Fill","color","stroke","Stroke","width","radius","MultiLineString","VectorLayer","set","setStyle","type","toString","GpxLayer","onSourceReady","showMarkers","showRoute","children","useState","gpxMarkers","setGpxMarkers","multiLineStringFeature","setMultiLineStringFeature","toggleMarkers","useCallback","show","markerPoint","addFeature","removeFeature","toggleRoute","addLayer","c","classNames","bind","STYLES","ControlButton","onClick","className","buttonClassName","tooltip","tooltipPlacement","rest","tooltipOpen","setTooltipOpen","buttonRef","useRef","current","addEventListener","removeEventListener","ControlButton__container","ref","placement","isOpen","target","toggle","delay","hide","modifiers","offset","INPUT_TYPES","DownloadControlButton","modalOpen","setModalOpen","includeGPX","includePDF","pdfOption","pdfFormat","pdfResolution","downloadOptions","setDownloadOptions","onFieldChange","checked","targetValue","value","onChange","download","downloadZipFile","centered","check","style","paddingLeft","row","for","sm","disabled","LAYER_ID","FEATURE_ID","MyLocationControlButton","useMemo","_feature","Feature","setId","Icon","anchor","src","marker","_vectorLayer","removeLayer","onGetCurrentPosition","position","fromLonLat","longitude","latitude","getFeatureById","setGeometry","getView","animate","center","duration","navigator","geolocation","getCurrentPosition","alert","PdfExportControlButton","onButtonCLick","exportMapToPDF","save","ZoomToExtentControlButton","fit","zoomControl","Zoom","attributionControl","Attribution","collapsible","scaleLineControl","ScaleLine","units","minWidth","controls","MapControls","zoomContainerRef","createRef","setTarget","control","addControl","removeControl","buttonProps","CloseControlButton","props","ControlButton__close","ZoomInControlButton","zoom","_extends","Object","assign","arguments","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","Svg36024Px","_ref","svgRef","title","titleId","height","viewBox","ForwardRef","Google360ControlButton","pointName","embedUrl","maxWidth","frameBorder","border","allowFullScreen","NextPointControlButton","PrevPointControlButton","PopupFooter","onPrevPointButtonClick","onNextPointButtonClick","prevFeature","google360Url","NextPointData","borderless","scope","PointData","lon","lat","PopupBody","scheduleUpdate","activeTab","setActiveTab","tab","tabs","active","href","e","preventDefault","tabId","PopupContent","onClose","coordinates","selectFeature","getProperties","size","verticalAlign","Popup","containerRef","overlayRef","Overlay","element","positioning","OverlayPositioning","CENTER_CENTER","addOverlay","setPosition","container","enabled","preventOverflow","flip","createPointTextFeature","Text","font","offsetY","pointTextStyle","START_POINT_ID","FINISH_POINT_ID","StartEndLayer","startEndVectorLayer","setVisible","onGpxVectorLayerStateChange","gpxVectorSource","multiLineStringGeometry","startFeature","yellowMarker","getFirstCoordinate","endFeature","getLastCoordinate","startEndSource","setZIndex","un","urls","maps","expandUrl","flat","TileLayer","xyzSource","rasterLayer","OSM","Tile","mapUrl","setUrl","URL","origin","rel","Component","initialState","pointSelectEvents","MapBrowserEventType","POINTERDOWN","isGpxWayPoint","getId","Map","mapRef","React","isPopupOpen","setIsPopupOpen","selectedFeature","setSelectedFeature","setSortedPointFeatures","useSelector","state","settings","showControls","OLMap","pixelRatio","onPopupClose","onMapPointerMove","evt","originalEvent","nodeName","toLowerCase","pixel","getEventPixel","forEachFeatureAtPixel","push","pointFeature","getTarget","cursor","onMapClick","getFeaturesAtPixel","hitTolerance","lng","view","View","setView","on","eventType","onGpxSourceReady","sortedFeatures","Dropdown","setIsOpen","onMouseEnter","onMouseLeave","DropdownGroup","options","values","onInputChange","dropdownLabel","label","dropdownName","items","caret","DropDown","right","inputName","event","stopPropagation","display","routes","Settings","updateSettings","MapPage"],"mappings":"sGAAA,qTAYQA,EAA6BC,IAA7BD,kBAAmBE,EAAUD,IAAVC,MAQdC,EAAe,SAACC,GAE3B,OADkBC,KAAKC,MAAMF,EAAW,KAuD7BG,EAAoB,SAACC,GAIhC,MAAO,CAAEC,OAHMC,YAASF,GAGPG,KAlEI,SAACP,GACtB,IAAMK,EAASC,YAASN,GAExB,OADaQ,YAAaH,GA8DbI,CAAQL,GAEEM,UADLX,EAAaK,KAIpBO,EAAiB,SAC5BC,EAEAC,GAEA,IAAMC,EAAmBD,EAAoBE,QAAQH,GAErD,OADkBC,EAAoBC,EAAmB,IAI9CE,EAAiB,SAC5BJ,EACAC,GAEA,IAAMC,EAAmBD,EAAoBE,QAAQH,GAErD,OADkBC,EAAoBC,EAAmB,IAI9CG,EAAgC,SAC3CL,EACAM,EACAC,GAEA,IAAMC,EAAYC,EAChBF,EAAeG,YAAYC,eAE7B,IAAKH,EACH,MAAM,IAAII,MAAM,wDAElB,IAAMC,EAAkBL,EAAUM,cAAcC,iBAAiB,GAC3DC,EAAeC,EAA2BjB,EAASQ,GACnDU,EAAmBD,EAA2BX,EAAaE,GAEjE,OArFoC,SACpCW,GAEA,IAAMC,EAAOD,EAAYE,QACvB,SAACC,EAAaC,EAAcC,GAC1B,GAAIA,IAAML,EAAYM,OAAS,EAC7B,OAAOH,EAET,IAAMI,EAAYP,EAAYK,EAAI,GAElCF,EAAYK,UAAY,IAAIC,IAAW,CACrCL,EACAG,IACCG,YAEH,IAAMC,EAAmB3C,EAAaoC,GAEhCzB,EADgBX,EAAauC,GACDI,EAQlC,OANIhC,EAAY,EACdwB,EAAYS,mBAAqB1C,KAAK2C,IAAIlC,GAE1CwB,EAAYW,iBAAmBnC,EAG1BwB,IAET,CACEK,SAAU,EACVM,gBAAiB,EACjBF,kBAAmB,EACnBG,aAAc,KAIlB,OADAd,EAAKc,cAAgBd,EAAKO,SAAW,KAAMQ,QAAQ,GAC5Cf,EAkDAgB,CADavB,EAAgBwB,MAAMrB,EAAcE,KAI7CoB,EAAe,SAAIC,EAAYC,GAAhB,OACzBD,EACEE,YACAC,WACAC,MAAK,SAACC,GAAD,OAAWA,EAAMC,IAAI,QAAUL,MAE5B/B,EAA4B,SACvCqC,GAEA,OAAOA,EAASH,MACd,SAAC3C,GAAD,OAAaA,EAAQc,cAAciC,YAAc/D,MAIxCgE,EAAmB,SAC9BF,GAD8B,OAG9BA,EAASG,QACP,SAACjD,GAAD,OAAaA,EAAQc,cAAciC,YAAc7D,MASxC+B,EAA6B,SACxCjB,EACAQ,GAEA,IAAMK,EAAkBL,EAAUM,cAAcC,iBAAiB,GAC3DmC,EAA0B1C,EAC7BM,cACAqC,gBAAgBnD,EAAQc,cAAcC,kBAMzC,OAJyBF,EAAgBuC,WACvC,SAACC,GAAD,OACE,IAAIzB,IAAW,CAACyB,EAAOH,IAA0BrB,YAHtC,OAQJyB,EAAyB,SACpCC,GAEA,IAAMC,EAASR,EAAiBO,EAAa5C,eACvCH,EAAYC,EAA0B8C,EAAa5C,eACzD,IAAKH,EACH,MAAM,IAAII,MACR,gFAcJ,OAX0B4C,EAAOjB,KAAI,SAACkB,GAEpC,MAAO,CACLC,aAAcD,EACdE,MAHmB1C,EAA2BwC,EAAOjD,OAOPoD,MAChD,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,MAAQG,EAAEH,SAEOpB,KAAI,qBAAGmB,kB,iCCxLxC,sGAAO,IAAMK,EAAiB,MACjBC,EAAqB,UACrBC,EAAU,CACrBC,GAAI,CAAC,KAAM,KACXC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,KACVC,GAAI,CAAC,IAAK,O,oBCPZC,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,yBAA2B,gDAAgD,qBAAuB,4CAA4C,8BAA8B,qD,oBCAnPD,EAAOC,QAAU,CAAC,MAAQ,2B,oBCA1BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,cAAgB,uC,oBCAlCD,EAAOC,QAAU,CAAC,IAAM,mB,oBCAxBD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,8BAA8B,mD,oBCA/FD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,wBAAwB,uC,oBCAvED,EAAOC,QAAU,CAAC,WAAW,8B,oBCA7BD,EAAOC,QAAU,CAAC,OAAS,8B,sPCedC,EAAqDC,gBAChE,YAAuC,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAChBC,EAAWC,cA2CjB,OAzCAC,qBAAU,WACRF,EAASG,eACT,IAAMC,EAAS,IAAIC,IAAI,CACrBC,eADqB,SACNrF,EAASsF,GACjBA,GAGU,YACVC,MAAMC,KACNF,EAA2BG,qBArBd,UA0BRC,SAAQ,SAACC,GACjB,IAAMC,EAAOD,EAAKE,aAAa,QAC/B,GAAID,EAAM,CACR,IAAME,EAAOH,EAAKI,YAClB/F,EAAQgG,cAAR,eACGJ,EAAOE,WAMZG,EAAS,IAAIC,IAAa,CAC9BC,IAAKvB,EACLO,WAUF,OARAN,EAAYuB,UAAUH,GACtBA,EAAOI,KAAK,UAAU,WAChBJ,EAAOK,aAAeC,IAAMC,QAC9BzB,EAAS0B,eACT3B,EAAQmB,OAIL,WACLA,EAAOS,aAER,CAAC3B,EAAUH,EAAQE,EAASD,IACxB,Q,oCCpDE8B,EAAiB,CAC5BC,MAAO,IAAIC,IAAM,CACfC,MAAO,IAAIC,IAAO,CAChBC,KAAM,IAAIC,IAAK,CACbC,MAAO,qBAETC,OAAQ,IAAIC,IAAO,CAAEF,MAAO,iBAAkBG,MAAO,IACrDC,OAAQ,MAGZC,gBAAiB,IAAIV,IAAM,CACzBM,OAAQ,IAAIC,IAAO,CACjBF,MAAO,iBACPG,MAAO,OCJPxC,EAAc,IAAI2C,IACxB3C,EAAY4C,IAAI,KAAM,oBACtB5C,EAAY6C,UAAS,SAAC1H,GACpB,IAAM2H,EAAO3H,EAAQc,cAAciC,UAAU6E,WAC7C,OAAOjB,EAAOgB,MAeT,IAAME,EAAmDlD,gBAC9D,YAAuE,IAApEpC,EAAmE,EAAnEA,IAAKuF,EAA8D,EAA9DA,cAAelD,EAA+C,EAA/CA,OAAQmD,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EAChCC,mBAA8B,IADE,mBAC7DC,EAD6D,KACjDC,EADiD,OAERF,qBAFQ,mBAE7DG,EAF6D,KAErCC,EAFqC,KAM9DC,EAAgBC,uBACpB,SAACC,GACC,IAAMxC,EAASpB,EAAYnE,YACvB+H,EACGzF,YAAiBiD,EAAOtF,eAAec,QAC1C0G,EAAWzC,SAAQ,SAACgD,GAClBzC,EAAO0C,WAAWD,MAItBP,EAAWzC,SAAQ,SAACgD,GAAD,OACjBzC,EAAO2C,cAAcF,QAI3B,CAACP,IAGGU,EAAcL,uBAClB,SAACC,GACC,GAAKJ,EAGL,GAAII,EAAM,CACR,IAAMxC,EAASpB,EAAYnE,YACtBD,YAA0BwF,EAAOtF,gBACpCkE,EAAYnE,YAAYiI,WAAWN,QAGrCxD,EAAYnE,YAAYkI,cAAcP,KAG1C,CAACA,IAGGvD,EAAU0D,uBACd,SAACjF,GACCuE,EAAcvE,GACd,IAAMT,EAAWS,EAAa5C,cAC9ByH,EAAcpF,YAAiBF,IAC/BwF,EAA0B7H,YAA0BqC,MAEtD,CAACgF,IAeH,OAZA7C,qBAAU,WACR1C,EAAIuG,SAASjE,KACZ,CAACtC,IAEJ0C,qBAAU,WACRsD,EAAcR,KACb,CAACA,EAAaQ,IAEjBtD,qBAAU,WACR4D,EAAYb,KACX,CAACA,EAAWa,IAGb,eAAC,WAAD,WACE,cAACnE,EAAD,CACEE,OAAQA,EACRC,YAAaA,EACbC,QAASA,IAEVmD,GAAYA,EAASpD,S,0GCtGxBkE,EAAIC,IAAWC,KAAKC,KAebC,EAA6DxE,gBACxE,YAQO,IAPLsD,EAOI,EAPJA,SACAmB,EAMI,EANJA,QACAC,EAKI,EALJA,UACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,QAGI,IAFJC,wBAEI,MAFe,SAEf,EADDC,EACC,mGACkCvB,oBAAkB,GADpD,mBACGwB,EADH,KACgBC,EADhB,KAEEC,EAAYC,iBAA0B,MAE5C5E,qBAAU,WAAO,IAAD,EACL,OAAT2E,QAAS,IAATA,GAAA,UAAAA,EAAWE,eAAX,SAAoBC,iBAAiB,QAASX,GAC9C,IAAMU,EAAO,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAWE,QAC3B,OAAO,WACE,OAAPA,QAAO,IAAPA,KAASE,oBAAoB,QAASZ,OAQ1C,OACE,sBAAKC,UAAWN,EAAEG,IAAOe,yBAA0BZ,GAAnD,UACE,gDACEA,UAAWN,EAAEG,IAAOC,cAAeG,GACnC3B,KAAK,SACLuC,IAAKN,GACDH,GAJN,aAMGxB,KAEFsB,GAAWK,EAAUE,SACpB,cAAC,IAAD,CACEK,UAAWX,EACXY,OAAQV,EACRW,OAAQT,EAAUE,QAClBQ,OAnBc,WACpBX,GAAgBD,IAmBVa,MAAO,CAAE9B,KAAM,EAAG+B,KAAM,GACxBC,UAAW,CACTC,OAAQ,CACNA,OAAQ,QARd,SAYGnB,U,kBClEAoB,EACD,W,4LCkCCC,GAET,SAAC,GAA8B,IAA5BrI,EAA2B,EAA3BA,IAAK0D,EAAsB,EAAtBA,OAAWwD,EAAW,kCACEvB,oBAAkB,GADpB,mBACzB2C,EADyB,KACdC,EADc,OAEc5C,mBAA0B,CACtE6C,YAAY,EACZC,YAAY,EACZC,UAAW,MACXC,UAAW,KACXC,cAAe,MAPe,mBAEzBC,EAFyB,KAERC,EAFQ,KAU1BtG,EAAWC,cAaXsG,EAAgB,SAAC,GAA8C,IAA5CjB,EAA2C,EAA3CA,OACfzE,EAA4CyE,EAA5CzE,KAAM+B,EAAsC0C,EAAtC1C,KAAM4D,EAAgClB,EAAhCkB,QAAgBC,EAAgBnB,EAAvBoB,OARd,SAAC7F,EAAc6F,GAC9BJ,EAAmB,2BACdD,GADa,kBAEfxF,EAAO6F,KAOVC,CAAS9F,EADK+B,IAASgD,EAAuBY,EAAUC,IAIpDG,EAAQ,uCAAG,wCAAA9H,EAAA,sEACmB,qDADnB,uBACP+H,EADO,EACPA,gBAINV,EAKEE,EALFF,UACAC,EAIEC,EAJFD,cACAH,EAGEI,EAHFJ,WACAD,EAEEK,EAFFL,WACAE,EACEG,EADFH,UATa,SAWTW,EACJrJ,EACA0D,EACA8E,EACAC,EACAE,EACAC,EACAF,GACA,kBAAMlG,EAASG,kBACf,kBAAMH,EAAS0B,kBApBF,2CAAH,qDA6BR6D,EAAS,WACbQ,GAAcD,IAGhB,OACE,eAAC,WAAD,WACE,cAAC1B,EAAD,2BAAmBM,GAAnB,IAAyBL,QApDP,WACpB0B,GAAa,IAmDsCtB,iBAAiB,QAAlE,SACE,cAAC,IAAD,OAEF,eAAC,IAAD,CAAOY,OAAQS,EAAWP,OAAQA,EAAQuB,UAAQ,EAAlD,UACE,cAAC,IAAD,CAAavB,OAAQA,EAArB,8BACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAWwB,OAAK,EAAhB,SACE,eAAC,KAAD,CAAOA,OAAK,EAAZ,UACE,cAAC,KAAD,CACEnE,KAAK,WACL/B,KAAK,aACL2F,QAASH,EAAgBL,WACzBW,SAAUJ,IACT,IANL,mBAUF,cAAC,KAAD,CAAWQ,OAAK,EAAhB,SACE,eAAC,KAAD,CAAOA,OAAK,EAAZ,UACE,cAAC,KAAD,CACEnE,KAAK,WACL/B,KAAK,aACL2F,QAASH,EAAgBJ,WACzBU,SAAUJ,IACT,IANL,mBAUDF,EAAgBJ,YACf,eAAC,KAAD,CAAWe,MAAO,CAAEC,YAAa,SAAjC,UACE,eAAC,KAAD,CAAWC,KAAG,EAAd,UACE,cAAC,KAAD,CAAOC,IAAI,YAAYC,GAAI,EAA3B,uBAGA,cAAC,KAAD,CAAKA,GAAI,EAAT,SACE,eAAC,KAAD,CACExE,KAAK,SACLnF,GAAG,YACHkJ,SAAUJ,EACV1F,KAAK,YACL6F,MAAOL,EAAgBF,UALzB,UAOE,wBAAQO,MAAM,KAAd,uBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,+BAIN,eAAC,KAAD,CAAWQ,KAAG,EAAd,UACE,cAAC,KAAD,CAAOC,IAAI,YAAYC,GAAI,EAA3B,wBAGA,cAAC,KAAD,CAAKA,GAAI,EAAT,SACE,eAAC,KAAD,CACExE,KAAK,SACLnF,GAAG,gBACHkJ,SAAUJ,EACV1F,KAAK,gBACL6F,MAAOL,EAAgBD,cALzB,UAOE,wBAAQM,MAAM,KAAd,2BACA,wBAAQA,MAAM,MAAd,qBACA,wBAAQA,MAAM,MAAd,oCAIN,eAAC,KAAD,CAAWQ,KAAG,EAAd,UACE,cAAC,KAAD,CAAOE,GAAI,EAAX,mBACA,eAAC,KAAD,CAAKA,GAAI,EAAT,UACE,cAAC,KAAD,CAAWL,OAAK,EAAhB,SACE,eAAC,KAAD,CAAOA,OAAK,EAAZ,UACE,cAAC,KAAD,CACEnE,KAAK,QACL/B,KAAK,YACL6F,MAAO1H,KACPwH,QACEH,EAAgBH,YAAclH,KAEhC2H,SAAUJ,IACT,IATL,kBAaF,cAAC,KAAD,CAAWQ,OAAK,EAAhB,SACE,eAAC,KAAD,CAAOA,OAAK,EAAZ,UACE,cAAC,KAAD,CACEnE,KAAK,QACL/B,KAAK,YACL6F,MAAOzH,KACPuH,QACEH,EAAgBH,YAAcjH,KAEhC0H,SAAUJ,IACT,IATL,gCAkBXF,EAAgBJ,YACfI,EAAgBH,YAAclH,MAC5B,cAAC,KAAD,CAAOmD,MAAM,UAAb,sEAKJ,cAAC,KAAD,CACEkC,QA9HkB,WAC5B0B,GAAa,GACRa,KA6HKS,UACGhB,EAAgBL,aAAeK,EAAgBJ,WAHpD,kC,wCC1NG,OAA0B,6DCmBnCqB,GAAW,mBACXC,GAAa,qBAONC,GAET,SAAC,GAAsB,IAApBhK,EAAmB,EAAnBA,IAAQkH,EAAW,uBAClB1E,EAAWC,cAEXhF,EAAUwM,mBAAiB,WAC/B,IAAMC,EAAW,IAAIC,KAAQ,CAC3B9G,KAAM,gBAWR,OATA6G,EAASE,MAAML,IACfG,EAAS/E,SACP,IAAIb,IAAM,CACRC,MAAO,IAAI8F,KAAK,CACdC,OAAQ,CAAC,GAAK,IACdC,IAAKC,QAIJN,IACN,IAEG5H,EAAc2H,mBAAqB,WACvC,IAAMQ,EAAe,IAAIxF,IAAY,CACnCvB,OAAQ,IAAIC,IAAa,CACvBpD,SAAU,CAAC9C,OAIf,OADAgN,EAAavF,IAAI,KAAM4E,IAChBW,IACN,CAAChN,IAEJiF,qBAAU,WACR,OAAO,WACL1C,EAAI0K,YAAYpI,MAEjB,CAAC7E,EAAS6E,EAAatC,IAE1B,IAAM2K,EAAuB,SAACC,GAC5BpI,EAAS0B,eAET,IAAMjH,EAAS4N,YAAW,CACxBD,EAAS3N,OAAO6N,UAChBF,EAAS3N,OAAO8N,WAGlBzI,EACGnE,YACA6M,eAAejB,IACfkB,YAAY,IAAI5G,KAAMpH,IAEzB+C,EAAIkL,UAAUC,QAAQ,CACpBC,OAAQnO,EACRoO,SA1DqB,OA2EzB,OACE,cAACzE,EAAD,yBAAeK,iBAAiB,QAAQJ,QAdpB,WAChB,gBAAiByE,WACnB9I,EAASG,eACJ5C,YAAaC,EAAK8J,KACrB9J,EAAIuG,SAASjE,GAEfgJ,UAAUC,YAAYC,mBAAmBb,IAGzCc,MAAM,kDAK4DvE,GAApE,aACE,cAAC,KAAD,Q,UCpFOwE,GAET,SAAC,GAAsB,IAApB1L,EAAmB,EAAnBA,IAAQkH,EAAW,uBAClB1E,EAAWC,cAEXkJ,EAAa,uCAAG,8BAAArK,EAAA,6DACpBkB,EAASG,eADW,SAEa,qDAFb,uBAEZiJ,EAFY,EAEZA,eAFY,SAKFA,EAAe5L,GALb,cAMhB6L,KAAK,WACTrJ,EAAS0B,eAPW,4CAAH,qDAUnB,OACE,cAAC0C,EAAD,yBAAeK,iBAAiB,QAAQJ,QAAS8E,GAAmBzE,GAApE,aACE,cAAC,KAAD,QCjBO4E,GAET,SAAC,GAAsB,IAApB9L,EAAmB,EAAnBA,IAAQkH,EAAW,uBAgBxB,OACE,cAACN,EAAD,yBAAeK,iBAAiB,QAAQJ,QAhBpB,WACP7G,EAAIkL,UACZa,IACH,CACE,iBACA,kBACA,mBACA,mBAEF,CACEV,SAnBmB,QAyB6CnE,GAApE,aACE,cAAC,KAAD,Q,oBC9BO8E,GAAc,I,OAAIC,GAElBC,GAAqB,IAAIC,KAAY,CAChDC,aAAa,IAGFC,GAAmB,IAAIC,KAAU,CAC5CC,MAAO,SACPC,SAAU,MAKGC,GAFE,CAACT,GAAaE,GAAoBG,I,qBCJ7C7F,GAAIC,IAAWC,KAAKC,MAOb+F,GAAyD,SAAC,GAGhE,IAFL1M,EAEI,EAFJA,IACA0D,EACI,EADJA,OAEMiJ,EAAmBC,sBAEzBlK,qBAAU,WAIR,OAFAsJ,GAAYa,UAAUF,EAAiBpF,SACvCkF,GAAStJ,SAAQ,SAAC2J,GAAD,OAAa9M,EAAI+M,WAAWD,MACtC,WACLL,GAAStJ,SAAQ,SAAC2J,GAAD,OAAa9M,EAAIgN,cAAcF,SAGjD,IAEH,IAAMG,EAAc,CAClBjN,MACA8G,UAAWN,GAAE,gCAEf,OACE,sBAAKM,UAAWH,KAAO+F,YAAvB,UACE,qBAAK/E,IAAKgF,IACV,cAAC,GAAD,aAA2B3F,QAAQ,cAAiBiG,IAEpD,cAAC,GAAD,aAAwBjG,QAAQ,iBAAoBiG,IACpD,cAAC,GAAD,aACEjG,QAAQ,0BACRtD,OAAQA,GACJuJ,IAGN,cAAC,GAAD,aAAyBjG,QAAQ,oBAAuBiG,Q,8DC1CjDC,GAGR9K,gBAAK,SAAC+K,GAAD,OACR,cAACvG,EAAD,yBACEE,UAAWH,IAAOyG,qBAClBrG,gBAAiBJ,IAAO,gCACpBwG,GAHN,aAKE,cAAC,KAAD,UCASE,GAETjL,gBAAK,YAA+B,IAA5BlF,EAA2B,EAA3BA,OAAQ8C,EAAmB,EAAnBA,IAAQkH,EAAW,gCAQrC,OACE,cAACN,EAAD,2BAAmBM,GAAnB,IAAyBL,QARX,WACd7G,EAAIkL,UAAUC,QAAQ,CACpBC,OAAQP,YAAW3N,GACnBoQ,KAAM,GACNjC,SAd4B,OAkB9B,SACE,cAAC,KAAD,UC7BN,SAASkC,KAA2Q,OAA9PA,GAAWC,OAAOC,QAAU,SAAU3F,GAAU,IAAK,IAAI7I,EAAI,EAAGA,EAAIyO,UAAUxO,OAAQD,IAAK,CAAE,IAAIyE,EAASgK,UAAUzO,GAAI,IAAK,IAAI0O,KAAOjK,EAAc8J,OAAOI,UAAUC,eAAeC,KAAKpK,EAAQiK,KAAQ7F,EAAO6F,GAAOjK,EAAOiK,IAAY,OAAO7F,IAA2BiG,MAAMC,KAAMN,WAEhT,SAASO,GAAyBvK,EAAQwK,GAAY,GAAc,MAAVxK,EAAgB,MAAO,GAAI,IAAkEiK,EAAK1O,EAAnE6I,EAEzF,SAAuCpE,EAAQwK,GAAY,GAAc,MAAVxK,EAAgB,MAAO,GAAI,IAA2DiK,EAAK1O,EAA5D6I,EAAS,GAAQqG,EAAaX,OAAOY,KAAK1K,GAAqB,IAAKzE,EAAI,EAAGA,EAAIkP,EAAWjP,OAAQD,IAAO0O,EAAMQ,EAAWlP,GAAQiP,EAAStQ,QAAQ+P,IAAQ,IAAa7F,EAAO6F,GAAOjK,EAAOiK,IAAQ,OAAO7F,EAFxMuG,CAA8B3K,EAAQwK,GAAuB,GAAIV,OAAOc,sBAAuB,CAAE,IAAIC,EAAmBf,OAAOc,sBAAsB5K,GAAS,IAAKzE,EAAI,EAAGA,EAAIsP,EAAiBrP,OAAQD,IAAO0O,EAAMY,EAAiBtP,GAAQiP,EAAStQ,QAAQ+P,IAAQ,GAAkBH,OAAOI,UAAUY,qBAAqBV,KAAKpK,EAAQiK,KAAgB7F,EAAO6F,GAAOjK,EAAOiK,IAAU,OAAO7F,EAMne,IAAI,GAAqB,gBAAoB,OAAQ,CACnD2G,EAAG,gMAGD,GAAqB,gBAAoB,OAAQ,CACnDhK,KAAM,OACNgK,EAAG,kBAGL,SAASC,GAAWC,EAAMC,GACxB,IAAIC,EAAQF,EAAKE,MACbC,EAAUH,EAAKG,QACf3B,EAAQc,GAAyBU,EAAM,CAAC,QAAS,YAErD,OAAoB,gBAAoB,MAAOpB,GAAS,CACtD9I,KAAM,eACNK,MAAO,QACPiK,OAAQ,QACRC,QAAS,YACTrH,IAAKiH,EACL,kBAAmBE,GAClB3B,GAAQ0B,EAAqB,gBAAoB,QAAS,CAC3D5O,GAAI6O,GACHD,GAAS,KAAM,GAAO,IAG3B,IAAII,GAA0B,aAAiBP,ICkBhCQ,IDjBA,IClBX,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,SAAalI,EAAW,0CACNvB,oBAAkB,GADZ,mBACjC2C,EADiC,KACtBC,EADsB,KAGlCR,EAAS,WACbQ,GAAcD,IAGhB,OACE,eAAC,WAAD,WACE,cAAC1B,EAAD,2BAAmBM,GAAnB,IAAyBL,QAASkB,EAAlC,SACE,cAAC,GAAD,OAEF,eAAC,IAAD,CACEF,OAAQS,EACRP,OAAQA,EACRuB,UAAQ,EACRE,MAAO,CAAE6F,SAAU,SAJrB,UAME,eAAC,IAAD,CAAatH,OAAQA,EAArB,UAA8BoH,EAA9B,UACA,cAAC,IAAD,UACE,wBACEN,MAAM,kBACNtE,IAAK6E,EACLtK,MAAM,OACNiK,OAAO,MACPO,YAAY,IACZ9F,MAAO,CAAE+F,OAAQ,GACjBC,iBAAe,cCrCdC,GAAsErN,gBACjF,SAAC+K,GAAD,OACE,cAACvG,EAAD,2BAAmBuG,GAAnB,aACE,cAAC,KAAD,UCHOuC,GAAsEtN,gBACjF,SAAC+K,GAAD,OACE,cAACvG,EAAD,2BAAmBuG,GAAnB,aACE,cAAC,KAAD,U,qBCGA3G,GAAIC,IAAWC,KAAKC,MAcbgJ,GAAyD,SAAC,GAUhE,IATL3P,EASI,EATJA,IACA9C,EAQI,EARJA,OACA6J,EAOI,EAPJA,gBACA6I,EAMI,EANJA,uBACAC,EAKI,EALJA,uBACAC,EAII,EAJJA,YACA/R,EAGI,EAHJA,YACAgS,EAEI,EAFJA,aACA1M,EACI,EADJA,KAEA,OACE,yBAAQyD,UAAWN,GAAE,UAArB,UACE,cAAC6G,GAAD,CACEnQ,OAAQA,EACR8C,IAAKA,EACLgH,QAAQ,gBACRF,UAAWC,IAEb,cAAC2I,GAAD,CACE7I,QAAS+I,EACT5I,QAAQ,iBACRF,UAAWC,EACX8C,UAAWiG,IAEb,cAACL,GAAD,CACE5I,QAASgJ,EACT7I,QAAQ,aACRF,UAAWC,EACX8C,UAAW9L,IAEZgS,GAAgB1M,GACf,cAAC,GAAD,CACE2D,QAAQ,WACRmI,UAAW9L,EACX+L,SAAUW,EACVjJ,UAAWC,Q,0CCtDfP,GAAIC,IAAWC,KAAKC,MAQbqJ,GAA6D5N,gBACxE,YAA+C,IAA5C3E,EAA2C,EAA3CA,QAASM,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACjBY,EAAcd,YAClBL,EACAM,EACAC,GAEF,OACE,cAAC,KAAD,CAAOiS,YAAU,EAACnJ,UAAWN,GAAE,SAA/B,SACE,kCACE,+BACE,oBAAI0J,MAAM,MAAV,uBACA,+BAAKtR,EAAYe,aAAjB,WAEF,+BACE,oBAAIuQ,MAAM,MAAV,6BACA,+BAAKtR,EAAYc,gBAAjB,UAEF,+BACE,oBAAIwQ,MAAM,MAAV,6BACA,+BAAKtR,EAAYY,kBAAjB,kBChCNgH,GAAIC,IAAWC,KAAKC,MASbwJ,GAAqD/N,gBAChE,YAAoC,IAAjC7E,EAAgC,EAAhCA,UAAW6S,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,IAAKjT,EAAW,EAAXA,KACtB,OACE,cAAC,KAAD,CAAO6S,YAAU,EAACnJ,UAAWN,GAAE,SAA/B,SACE,kCACE,+BACE,oBAAI0J,MAAM,MAAV,wBACA,+BAAK3S,EAAL,UAEF,+BACE,oBAAI2S,MAAM,MAAV,wBACA,6BAAKE,OAEP,+BACE,oBAAIF,MAAM,MAAV,uBACA,6BAAKG,OAEP,+BACE,oBAAIH,MAAM,MAAV,0BACA,6BACE,sBAAMpJ,UAAWN,GAAE,eAAnB,SAAoCpJ,iB,mJClB5CoJ,GAAIC,IAAWC,KAAKC,MAcb2J,GAAqD,SAAC,GAU5D,IATLtS,EASI,EATJA,eACAP,EAQI,EARJA,QACAM,EAOI,EAPJA,YACA+R,EAMI,EANJA,YACAvS,EAKI,EALJA,UACA6S,EAII,EAJJA,IACAC,EAGI,EAHJA,IACAjT,EAEI,EAFJA,KACAmT,EACI,EADJA,eACI,EAC8B5K,mBAAS,KADvC,mBACG6K,EADH,KACcC,EADd,KAGE1I,EAAS,SAAC2I,GACVF,IAAcE,IAChBD,EAAaC,GACbH,MAOJ,OAHA7N,qBAAU,WACR+N,EAAa,OACZ,CAAChT,IAEF,eAAC,KAAD,WACE,eAAC,KAAD,CAAKkT,MAAI,EAAT,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CACE7J,UAAWN,GAAE,CAAEoK,OAAsB,MAAdJ,IACvBK,KAAK,QACLhK,QAAS,SAACiK,GACRA,EAAEC,iBACFhJ,EAAO,MALX,oBAYDhK,GACC,cAAC,KAAD,UACE,cAAC,KAAD,CACE+I,UAAWN,GAAE,CAAEoK,OAAsB,MAAdJ,IACvBK,KAAK,OACLhK,QAAS,SAACiK,GACRA,EAAEC,iBACFhJ,EAAO,MALX,0BAYH+H,GACC,cAAC,KAAD,UACE,cAAC,KAAD,CACEhJ,UAAWN,GAAE,CAAEoK,OAAsB,MAAdJ,IACvBK,KAAK,QACLhK,QAAS,SAACiK,GACRA,EAAEC,iBACFhJ,EAAO,MALX,iCAaN,eAAC,KAAD,CAAYyI,UAAWA,EAAvB,UACE,cAAC,KAAD,CAASQ,MAAM,IAAIlK,UAAWN,GAAE,YAAhC,SACE,cAAC2J,GAAD,CAAW5S,UAAWA,EAAW6S,IAAKA,EAAKC,IAAKA,EAAKjT,KAAMA,MAE5DW,GACC,cAAC,KAAD,CAASiT,MAAM,IAAIlK,UAAWN,GAAE,YAAhC,SACE,cAACwJ,GAAD,CACEhS,eAAgBA,EAChBP,QAASA,EACTM,YAAaA,MAIlB+R,GACC,cAAC,KAAD,CAASkB,MAAM,IAAIlK,UAAWN,GAAE,YAAhC,SACE,cAACwJ,GAAD,CACEhS,eAAgBA,EAChBP,QAASqS,EACT/R,YAAaN,a,qBC1FdwT,GAA2D,SAAC,GAWlE,IAVLjR,EAUI,EAVJA,IACAuQ,EASI,EATJA,eACAW,EAQI,EARJA,QACAlT,EAOI,EAPJA,eACAP,EAMI,EANJA,QACAqS,EAKI,EALJA,YACA/R,EAII,EAJJA,YACAgJ,EAGI,EAHJA,gBACAoK,EAEI,EAFJA,YACAC,EACI,EADJA,cACI,EACgCpU,YAAkBmU,GAA9CjU,EADJ,EACIA,OAAQE,EADZ,EACYA,KAAMG,EADlB,EACkBA,UADlB,EAE2BE,EAAQ4T,gBAA/BhO,EAFJ,EAEIA,KAAM0M,EAFV,EAEUA,aACRK,GAAOlT,EAAO,IAAM,GAAG0C,QAAQ,GAC/ByQ,GAAOnT,EAAO,IAAM,GAAG0C,QAAQ,GAkBrC,OAJA8C,qBAAU,WACR6N,MACC,CAACY,EAAaZ,IAGf,eAAC,WAAD,WACE,eAAC,KAAD,WACE,cAACrD,GAAD,CAAoBrG,QAASqK,IAC7B,cAAC,KAAD,CAAQI,KAAM,GAAI9H,MAAO,CAAE+H,cAAe,SAF5C,IAEyDlO,GACrDyM,GAAe,YACf/R,GAAe,eAEnB,cAAC,GAAD,CACEqS,IAAKA,EACLC,IAAKA,EACLjT,KAAMA,EACNG,UAAWA,EACXS,eAAgBA,EAChBP,QAASA,EACTM,YAAaA,EACb+R,YAAaA,EACbS,eAAgBA,IAElB,cAAC,GAAD,CACEvQ,IAAKA,EACL9C,OAAQA,EACRmG,KAAMA,EACNtF,YAAaA,EACb+R,YAAaA,EACb/I,gBAAiBA,EACjB6I,uBApCyB,WACzBE,GACFsB,EAActB,IAmCZD,uBA3CyB,WACzB9R,GACFqT,EAAcrT,IA0CZgS,aAAcA,QC1EhBvJ,GAAIC,IAAWC,KAAKC,MAab6K,GAA6C,SAAC,GASpD,IARLxR,EAQI,EARJA,IACAhC,EAOI,EAPJA,eACAkT,EAMI,EANJA,QACArJ,EAKI,EALJA,OACApK,EAII,EAJJA,QACAM,EAGI,EAHJA,YACA+R,EAEI,EAFJA,YACAsB,EACI,EADJA,cAEMK,EAAenK,iBAAuB,MACtCoK,EAAapK,mBACb6J,EAAc1T,EAAQc,cAAcC,iBAkB1C,OAhBAkE,qBAAU,WACRgP,EAAWnK,QAAU,IAAIoK,KAAQ,CAC/BC,QAASH,EAAalK,QACtBsK,YAAaC,KAAmBC,gBAElC/R,EAAIgS,WAAWN,EAAWnK,WACzB,CAACvH,IAEJ0C,qBAAU,WAAO,IAAD,EACd,UAAAgP,EAAWnK,eAAX,SAAoB0K,YAAYd,GAChCnR,EAAIkL,UAAUC,QAAQ,CACpBC,OAAQ+F,EACR9F,SCpD4B,QDsD7B,CAACrL,EAAKvC,EAAS0T,IAGhB,qBAAKlR,GAAG,oBAAoB0H,IAAK8J,EAAjC,SACE,cAAC,KAAD,CACE7J,UAAU,MACVC,OAAQA,EACRC,OAAQ2J,EACRS,UAAWT,EACX3K,UAAWN,GAAE,SACb0B,UAAW,CACTD,KAAM,CAAEkK,SAAS,GACjBC,gBAAiB,CAAED,SAAS,GAC5BE,KAAM,CAAEF,SAAS,IATrB,SAYG,YAAyB,IAAtB5B,EAAqB,EAArBA,eACF,OACE,cAAC,GAAD,CACEvQ,IAAKA,EACLkR,QAASA,EACTlT,eAAgBA,EAChBP,QAASA,EACTM,YAAaA,EACb+R,YAAaA,EACbS,eAAgBA,EAChBY,YAAaA,EACbpK,gBAAiBP,GAAE,yBACnB4K,cAAeA,U,UElFd,OAA0B,6DC+BnCkB,GAAyB,SAC7BjP,EACApD,EACA0E,EACA6F,GAEA,IAAM/M,EAAU,IAAI0M,KAAQ,CAC1B9G,SAIF,OAFA5F,EAAQ0H,SAxBa,SAAC5B,EAAciH,EAAgB7F,GAA/B,OACrB,IAAIL,IAAM,CACRC,MAAO,IAAI8F,KAAK,CACdC,OAAQ,CAAC,GAAK,GACdC,IAAKC,IAEPjH,KAAM,IAAIgP,KAAK,CACbhP,OACAkB,KAAM,IAAIC,IAAK,CAAEC,UACjBC,OAAQ,IAAIC,IAAO,CAAEF,MAAO,UAAWG,MAAO,IAC9C0N,KAAM,kBACNC,QAAS,OAaIC,CAAerP,EAAMmH,EAAQ7F,IAC9ClH,EAAQ2M,MAAMnK,GACPxC,GAUIkV,GAAiB,aACjBC,GAAkB,cAElBC,GAA6DzQ,gBACxE,YAAmD,IAAhDpC,EAA+C,EAA/CA,IAAKhC,EAA0C,EAA1CA,eAAgBqE,EAA0B,EAA1BA,OAAQmD,EAAkB,EAAlBA,YACxBsN,EAAsBxL,mBAEtBtB,EAAgB,SAACE,GAAmB,IAAD,EACvC,UAAA4M,EAAoBvL,eAApB,SAA6BwL,WAAW7M,IAGpC8M,EAA8B,WAClC,IAAMC,EAAkBjV,EAAeG,YACvC,GACE8U,EAAgBlP,aAAeC,IAAMC,OACrCgP,EAAgB7U,cAAcc,OAC9B,CAAC,IAAD,IACMgU,EAAuB,UAAGhV,YAC9B+U,EAAgB7U,sBADW,aAAG,EAE7BG,cACH,IAAK2U,EACH,OAEF,IAAMC,EAAeb,GACnB,QACAK,GACA,iBACAS,IAEFD,EAAalI,YACX,IAAI5G,KAAM6O,EAAwBG,uBAGpC,IAAMC,EAAahB,GACjB,SACAM,GACA,iBACAQ,IAEFE,EAAWrI,YACT,IAAI5G,KAAM6O,EAAwBK,sBAGpC,IAAMC,EAAiB,IAAI7P,IAAa,CACtCpD,SAAU,CAAC4S,EAAcG,KAG3B,UAAAR,EAAoBvL,eAApB,SAA6B1D,UAAU2P,GACvCxN,GAAc,KA6BlB,OAzBAtD,qBAAU,WAIR,OAHAoQ,EAAoBvL,QAAU,IAAItC,IAClC6N,EAAoBvL,QAAQkM,UAAU,GACtCzT,EAAIuG,SAASuM,EAAoBvL,SAC1B,WACDuL,EAAoBvL,SACtBvH,EAAI0K,YAAYoI,EAAoBvL,YAIvC,IAEH7E,qBAAU,WAGR,OAFAsD,GAAc,GACdhI,EAAe8F,KAAK,SAAUkP,GACvB,WACLhV,EAAe0V,GAAG,SAAUV,MAG7B,CAAC3Q,IAEJK,qBAAU,WACRsD,EAAcR,KACb,CAACA,IAEG,Q,+ECzHLmO,GAAOC,GAAK5T,KAAI,gBAAG4D,EAAH,EAAGA,IAAH,OAAaiQ,aAAUjQ,MAAMkQ,OAOtCC,GAAb,oDAGE,WAAY5G,GAAwB,IAAD,+BACjC,cAAMA,IAHA6G,eAE2B,IAD3BC,iBAC2B,EAEjC,EAAKD,UAAY,IAAIE,KACrB,EAAKD,YAAc,IAAIE,KAAK,CAC1BzQ,OAAQ,EAAKsQ,YAEf,EAAKC,YAAY/O,IAAI,KAAM,gBANM,EAHrC,iEAY6B,IAAD,EACA8I,KAAKb,MAArBnN,EADgB,EAChBA,IAAKoU,EADW,EACXA,OACbpU,EAAIuG,SAASyH,KAAKiG,aAClBjG,KAAKgG,UAAUK,OAAOD,KAf1B,2CAkB8B,IAClBA,EAAWpG,KAAKb,MAAhBiH,OACRpG,KAAKgG,UAAUK,OAAOD,KApB1B,6CAwBoBpG,KAAKb,MAAbnN,IACJ0K,YAAYsD,KAAKiG,eAzBzB,+BA6BI,OACE,cAAC,IAAD,UACGN,GAAK3T,KAAI,SAAC4D,GAAD,OACR,sBAAgBiN,KAAM,IAAIyD,IAAI1Q,GAAK2Q,OAAQC,IAAI,cAApC5Q,YAhCrB,GAA+B6Q,a,qBCqBzBC,I,OACC,WADDA,GAEC,OAFDA,GAGE,EAGFC,GAAoB,CAACC,IAAoBC,aAE/C,SAASC,GAAcrX,GACrB,OACEA,EAAQc,cAAciC,YAAc9D,IAAaC,OACjDc,EAAQsX,UAAYpC,IACpBlV,EAAQsX,UAAYnC,GAIjB,IAAMoC,GAA+B,SAAC,GAAiB,EAAftP,SAAgB,IACvDuP,EAASC,IAAMtI,YADuC,EAEtBjH,oBAAkB,GAFI,mBAErDwP,EAFqD,KAExCC,EAFwC,OAGdzP,qBAHc,mBAGrD0P,EAHqD,KAGpCC,EAHoC,OAIN3P,qBAJM,mBAIrDjI,EAJqD,KAIhC6X,EAJgC,OAOKC,aAC/D,SAACC,GAAD,OAAsBA,EAAMC,YADtBtB,EAPoD,EAOpDA,OAAQ/R,EAP4C,EAO5CA,OAAQsT,EAPoC,EAOpCA,aAAcnQ,EAPsB,EAOtBA,YAAaC,EAPS,EAOTA,UAI7CzF,EAAMiK,mBACV,kBACE,IAAI2L,IAAM,CACRC,WAAY,EACZpJ,SAAU,OAEd,IAGI1O,EACJsX,GACA3X,GACAF,YAAe6X,EAAiB3X,GAE5BoS,EACJuF,GACA3X,GACAG,YAAewX,EAAiB3X,GAE5BoY,EAAe7P,uBAAY,WAC/BmP,GAAe,KACd,IAEGW,EAAmB,SAACC,GAAmC,IAAD,EAC1D,GAEE,YADA,UAACA,EAAIC,qBAAL,aAAC,EAAmBnO,QAAuBoO,SAASC,cAEpD,CACA,IAAMC,EAAQpW,EAAIqW,cAAcL,EAAIC,eAC9B1V,EAA0B,GAChCP,EAAIsW,sBAAsBF,GAAO,SAAC3Y,GAChC8C,EAASgW,KAAK9Y,MAEhB,IAAM+Y,EAAejW,EAASH,KAAK0U,IAClC9U,EAAIyW,YAA+BjN,MAAMkN,OAASF,EAC/C,UACA,KAIFG,EAAa,SAACX,GAAmC,IAAD,EAC9CzV,EAAWP,EAAI4W,mBAAmBZ,EAAII,MAAO,CAAES,aAAc,IACnE,GAAItW,GAAYA,EAASrB,OAAQ,CAC/B,IAAMzB,EAAU8C,EAASH,KAAK0U,IAC1BrX,IACFuY,EAAIjF,iBACJuE,EAAmB7X,GACnB2X,GAAe,QAIjB,YADA,UAACY,EAAIC,qBAAL,aAAC,EAAmBnO,QAAuBoO,SAASC,eAGpDf,GAAe,IAIbhE,EAAgBnL,uBAAY,SAACxI,GACjC6X,EAAmB7X,KAClB,IAEHiF,qBAAU,WAAO,IACP2N,EAAmBqE,GAAdoC,EAAcpC,GAATpH,EAASoH,GACrB5M,EAASmN,EAAO1N,QACtB,GAAIO,EAAQ,CACV,IAAMiP,EAAO,IAAIC,IAAK,CACpB5L,OAAQP,YAAW,CAACiM,EAAKzG,IACzB/C,SAEFtN,EAAI6M,UAAU/E,GACd9H,EAAIiX,QAAQF,GACZ/W,EAAIkX,GAAG,cAAenB,GAKxB,OAFApB,GAAkBxR,SAAQ,SAACgU,GAAD,OAAenX,EAAIkX,GAAGC,EAAWR,MAEpD,WACD7O,GACF9H,EAAI0T,GAAG,cAAeqC,GAExBpB,GAAkBxR,SAAQ,SAACgU,GAAD,OAAenX,EAAI0T,GAAGyD,EAAWR,SAG5D,IAEH,IAAMS,EAAmBnR,uBAAY,SAACjF,GACpC,IAAMqW,EAAiBtW,YAAuBC,GAC9CuU,EAAuB8B,KACtB,IAEH,OACE,sBAAKvQ,UAAWH,KAAOqO,IAAKrN,IAAKsN,EAAjC,UACE,cAAC3P,EAAD,CACEjD,OAAQA,EACRmD,YAAaA,EACbC,UAAWA,EACXF,cAAe6R,EACfpX,IAAKA,EALP,SAOG,SAAChC,GACA,OACE,eAAC,WAAD,WACG2X,GACC,cAAC,GAAD,CAAa3V,IAAKA,EAAK0D,OAAQ1F,EAAeG,cAEhD,cAAC0U,GAAD,CACE7S,IAAKA,EACLhC,eAAgBA,EAChBwH,YAAaA,EACbnD,OAAQA,IAETgT,GACC,cAAC,GAAD,CACErV,IAAKA,EACLhC,eAAgBA,EAChBP,QAAS4X,EACTtX,YAAaA,EACb+R,YAAaA,EACbjI,OAAQsN,EACRjE,QAAS4E,EACT1E,cAAeA,UAO3B,cAAC,GAAD,CAAWpR,IAAKA,EAAKoU,OAAQA,Q,uIChKpBkD,GA3BkC,SAAC,GAAkB,IAAhB5R,EAAe,EAAfA,SAAe,EACrCC,oBAAkB,GADmB,mBAC1DkC,EAD0D,KAClD0P,EADkD,KAejE,OACE,cAAC,KAAD,CACE1P,OAAQA,EACRE,OAfW,WACbwP,GAAW1P,IAeT2P,aAZiB,WACnBD,GAAU,IAYRE,aATiB,WACnBF,GAAU,IAIV,SAMG7R,K,qBCHMgS,GAA+D,SAAC,GAItE,IAHLvO,EAGI,EAHJA,SACAwO,EAEI,EAFJA,QACAC,EACI,EADJA,OAEMC,EAAgB,SAAC,GAA8C,IAA5C/P,EAA2C,EAA3CA,OACfzE,EAA4CyE,EAA5CzE,KAAM+B,EAAsC0C,EAAtC1C,KAAM4D,EAAgClB,EAAhCkB,QAAgBC,EAAgBnB,EAAvBoB,MAE7BC,EAAS9F,EADK+B,IAASgD,EAAuBY,EAAUC,IAI1D,OACE,sBAAMnC,UAAWH,KAAO+Q,cAAxB,SACE,cAAC,KAAD,UACE,cAAC,KAAD,UACGC,EAAQ3X,KACP,gBAAU8X,EAAV,EAAGC,MAA4BC,EAA/B,EAAyB3U,KAAoB+B,EAA7C,EAA6CA,KAAM6S,EAAnD,EAAmDA,MAAnD,OACE,eAAC,GAAD,WACE,cAAC,KAAD,CACEC,OAAK,EACLvT,MAAM,YACNmC,UAAWH,KAAOwR,SAHpB,SAKGL,IAEH,cAAC,KAAD,CAAcM,OAAK,EAAnB,SACGH,EAAMjY,KAAI,gBAASqY,EAAT,EAAGhV,KAAiB0U,EAApB,EAAoBA,MAAOnU,EAA3B,EAA2BA,IAA3B,MACA,cAATwB,EACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAWmE,OAAK,EAAhB,SACE,eAAC,KAAD,CACEA,OAAK,EACL1C,QAAS,SAACyR,GACRA,EAAMC,mBAHV,UAME,cAAC,KAAD,CACElV,KAAMgV,EACNjT,KAAK,WACL4D,UACI4O,EAAOS,GAEXlP,SAAU0O,IACT,IACFE,QAhBYM,GAqBnB,eAAC,KAAD,CAEExR,QAAS,WACHjD,GACFuF,EAAS6O,EAAcpU,IAJ7B,UAQGA,IACDgU,EAAOI,GACL,cAAC,IAAD,IAEA,sBACExO,MAAO,CACLC,YAAa,MACb+O,QAAS,kBAGZ,IACFH,IAlBIA,UAjCAP,aCnChBH,GAA4B,CACvC,CACEI,MAAO,SACP1U,KAAM,SACN4U,M,MAAOQ,GAET,CACEV,MAAO,SACP1U,KAAM,SACN4U,MAAOrE,IAET,CACEmE,MAAO,UACP1U,KAAM,UACN+B,KAAM,YACN6S,MAAO,CAKL,CACE5U,KAAM,eACN0U,MAAO,iBAET,CACE1U,KAAM,cACN0U,MAAO,gBAET,CACE1U,KAAM,YACN0U,MAAO,iBC3BFW,GAAoC,WAC/C,IAAMhD,EAAWF,aAAY,SAACC,GAAD,OAAsBA,EAAMC,YACnDlT,EAAWC,cAUjB,OACE,cAAC,GAAD,CACEkV,QAASA,GACTC,OAAQlC,EACRvM,SAZqB,SAAC9F,EAAc6F,GACtC1G,EACEmW,aAAe,eACZtV,EAAO6F,S,qBCRH0P,GAAmC,kBAC9C,eAAC,WAAD,WACE,cAAC,IAAD,UACE,wDAEF,sBAAK9R,UAAWH,KAAOiS,QAAvB,UACE,cAAC,GAAD,IACA,cAAC,GAAD","file":"static/js/map-page.071c4fb9.chunk.js","sourcesContent":["import { Coordinate, toStringHDMS } from 'ol/coordinate';\nimport Feature from 'ol/Feature';\nimport Geometry from 'ol/geom/Geometry';\nimport GeometryType from 'ol/geom/GeometryType';\nimport LineString from 'ol/geom/LineString';\nimport MultiLineString from 'ol/geom/MultiLineString';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport { default as OLMap } from 'ol/Map';\nimport { toLonLat } from 'ol/proj';\nimport VectorSource from 'ol/source/Vector';\n\nconst { MULTI_LINE_STRING, POINT } = GeometryType;\n\nexport const getHDMS = (coordinate: Coordinate): string => {\n  const lonLat = toLonLat(coordinate);\n  const hdms = toStringHDMS(lonLat);\n  return hdms;\n};\n\nexport const getElevation = (coordinate: Coordinate): number => {\n  const elevation = Math.round(coordinate[2]);\n  return elevation;\n};\n\nexport interface DataMultiCoords {\n  distance: number;\n  elevationGainUp: number;\n  elevationGainDown: number;\n  distanceInKm: string;\n}\n\nexport const getDataFromMultiCoords = (\n  multiCoords: Coordinate[]\n): DataMultiCoords => {\n  const data = multiCoords.reduce<DataMultiCoords>(\n    (accumulator, currentValue, i) => {\n      if (i === multiCoords.length - 1) {\n        return accumulator;\n      }\n      const nextValue = multiCoords[i + 1];\n\n      accumulator.distance += new LineString([\n        currentValue,\n        nextValue,\n      ]).getLength();\n\n      const currentElevation = getElevation(currentValue);\n      const nextElevation = getElevation(nextValue);\n      const elevation = nextElevation - currentElevation;\n\n      if (elevation < 0) {\n        accumulator.elevationGainDown += Math.abs(elevation);\n      } else {\n        accumulator.elevationGainUp += elevation;\n      }\n\n      return accumulator;\n    },\n    {\n      distance: 0,\n      elevationGainUp: 0,\n      elevationGainDown: 0,\n      distanceInKm: '',\n    }\n  );\n  data.distanceInKm = (data.distance / 1000).toFixed(2);\n  return data;\n};\n\ninterface DataCoords {\n  lonLat: Coordinate;\n  hdms: string;\n  elevation: number;\n}\n\nexport const getDataFromCoords = (coords: Coordinate): DataCoords => {\n  const lonLat = toLonLat(coords);\n  const hdms = getHDMS(coords);\n  const elevation = getElevation(coords);\n  return { lonLat, hdms, elevation };\n};\n\nexport const getNextFeature = (\n  feature: Feature<Point>,\n  // gpxVectorLayer: VectorLayer,\n  sortedPointFeatures: Feature<Point>[]\n): Feature<Point> => {\n  const sortedPointIndex = sortedPointFeatures.indexOf(feature);\n  const nextPoint = sortedPointFeatures[sortedPointIndex + 1];\n  return nextPoint;\n};\n\nexport const getPrevFeature = (\n  feature: Feature<Point>,\n  sortedPointFeatures: Feature<Point>[]\n): Feature<Point> => {\n  const sortedPointIndex = sortedPointFeatures.indexOf(feature);\n  const nextPoint = sortedPointFeatures[sortedPointIndex - 1];\n  return nextPoint;\n};\n\nexport const getMultiCoordsFromNextFeature = (\n  feature: Feature<Point>,\n  nextFeature: Feature<Point>,\n  gpxVectorLayer: VectorLayer\n): DataMultiCoords => {\n  const multiLine = getMultiLineStringFeature(\n    gpxVectorLayer.getSource().getFeatures()\n  );\n  if (!multiLine) {\n    throw new Error('unable to find multiLine feature in gpx vector layer');\n  }\n  const multiLineCoords = multiLine.getGeometry().getCoordinates()[0];\n  const featureIndex = getFeatureIndexInMultiLine(feature, multiLine);\n  const nextFeatureIndex = getFeatureIndexInMultiLine(nextFeature, multiLine);\n  const multiCoords = multiLineCoords.slice(featureIndex, nextFeatureIndex);\n  return getDataFromMultiCoords(multiCoords);\n};\n\nexport const getLayerById = <T>(map: OLMap, id: string): T | undefined =>\n  (map\n    .getLayers()\n    .getArray()\n    .find((layer) => layer.get('id') === id) as unknown) as T;\n\nexport const getMultiLineStringFeature = (\n  features: Feature<Geometry>[]\n): Feature<MultiLineString> | undefined => {\n  return features.find(\n    (feature) => feature.getGeometry().getType() === MULTI_LINE_STRING\n  ) as Feature<MultiLineString>;\n};\n\nexport const getPointFeatures = (\n  features: Feature<Geometry>[]\n): Feature<Point>[] =>\n  features.filter(\n    (feature) => feature.getGeometry().getType() === POINT\n  ) as Feature<Point>[];\n\nexport interface SortedPointFeature {\n  featurePoint: Feature<Point>;\n  closestPointInMultiLine: Coordinate;\n  index: number;\n}\n\nexport const getFeatureIndexInMultiLine = (\n  feature: Feature<Point>,\n  multiLine: Feature<MultiLineString>\n): number => {\n  const multiLineCoords = multiLine.getGeometry().getCoordinates()[0];\n  const closestPointInMultiLine = multiLine\n    .getGeometry()\n    .getClosestPoint(feature.getGeometry().getCoordinates());\n  const margin = 50; // meters\n  const closesPointIndex = multiLineCoords.findIndex(\n    (coord) =>\n      new LineString([coord, closestPointInMultiLine]).getLength() < margin\n  );\n  return closesPointIndex;\n};\n\nexport const getSortedPointFeatures = (\n  vectorSource: VectorSource\n): Feature<Point>[] => {\n  const points = getPointFeatures(vectorSource.getFeatures());\n  const multiLine = getMultiLineStringFeature(vectorSource.getFeatures());\n  if (!multiLine) {\n    throw new Error(\n      'getSortedPointFeatures: unable to find multiLine feature in gpx vector layer'\n    );\n  }\n  const pointsInMultiLine = points.map((point) => {\n    const featureIndex = getFeatureIndexInMultiLine(point, multiLine);\n    return {\n      featurePoint: point,\n      index: featureIndex,\n    };\n  });\n\n  const sortedPointsInMultiline = pointsInMultiLine.sort(\n    (a, b) => a.index - b.index\n  );\n  return sortedPointsInMultiline.map(({ featurePoint }) => featurePoint);\n};\n\nexport const sampleCoordinates = (\n  coords: Coordinate[],\n  minDistanceThreshold = 0\n): {\n  coord: Coordinate;\n  distance: number;\n  distanceFromStart: number;\n}[] => {\n  let curMinDistance = 0;\n  let distanceFromStart = 0;\n  return coords\n    .map((coord, i) => {\n      const distance =\n        i === 0 ? 0 : new LineString([coords[i - 1], coord]).getLength(); // meter\n      distanceFromStart += distance;\n      return {\n        coord,\n        distance,\n        distanceFromStart,\n      };\n    })\n    .filter((point, i) => {\n      curMinDistance += point.distance;\n      if (!i || curMinDistance > minDistanceThreshold) {\n        curMinDistance = 0;\n        return true;\n      }\n      return false;\n    });\n};\n","export const PDF_OPTION_ALL = 'all';\nexport const PDF_OPTION_CURRENT = 'current';\nexport const PDFDims = {\n  a0: [1189, 841],\n  a1: [841, 594],\n  a2: [594, 420],\n  a3: [420, 297],\n  a4: [297, 210],\n  a5: [210, 148],\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlButton\":\"ControlButton_ControlButton__3stTO\",\"ControlButton__container\":\"ControlButton_ControlButton__container__3bvxv\",\"ControlButton__close\":\"ControlButton_ControlButton__close__2X7iC\",\"ControlButton__close-button\":\"ControlButton_ControlButton__close-button__w3FfZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"PointData_table__n_vwp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MapPage\":\"MapPage_MapPage__2ScJA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropdownGroup\":\"DropdownGroup_DropdownGroup__14KIR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Map\":\"Map_Map__3R7Yv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MapControls\":\"MapControls_MapControls__sDdcj\",\"MapControls__button-control\":\"MapControls_MapControls__button-control__1zU34\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Popup\":\"Popup_Popup__26Fqg\",\"Popup__button-control\":\"Popup_Popup__button-control__12RRG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab-pane\":\"PopupBody_tab-pane__BNpHb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"PopupFooter_footer__1E23m\"};","import GPX from 'ol/format/GPX';\nimport VectorLayer from 'ol/layer/Vector';\nimport STATE from 'ol/source/State';\nimport VectorSource from 'ol/source/Vector';\nimport { memo, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { hideSpinner, showSpinner } from '../../features/spinner';\n\nconst EXTENSIONS_TAG_NAME = 'gr20';\n\nexport interface GpxSourceProps {\n  gpxUrl: string;\n  vectorLayer: VectorLayer;\n  onReady: (vectorSource: VectorSource) => void;\n}\n\nexport const GpxSource: React.FunctionComponent<GpxSourceProps> = memo(\n  ({ gpxUrl, vectorLayer, onReady }) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      dispatch(showSpinner());\n      const format = new GPX({\n        readExtensions(feature, extensionsNode) {\n          if (!extensionsNode) {\n            return;\n          }\n          const gr20Nodes = [\n            ...Array.from(\n              (extensionsNode as Element).getElementsByTagName(\n                EXTENSIONS_TAG_NAME\n              )\n            ),\n          ];\n          gr20Nodes.forEach((node) => {\n            const name = node.getAttribute('name');\n            if (name) {\n              const text = node.textContent;\n              feature.setProperties({\n                [name]: text,\n              });\n            }\n          });\n        },\n      });\n      const source = new VectorSource({\n        url: gpxUrl,\n        format,\n      });\n      vectorLayer.setSource(source);\n      source.once('change', () => {\n        if (source.getState() === STATE.READY) {\n          dispatch(hideSpinner());\n          onReady(source);\n        }\n      });\n\n      return () => {\n        source.dispose();\n      };\n    }, [dispatch, gpxUrl, onReady, vectorLayer]);\n    return null;\n  }\n);\n","import Circle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Style from 'ol/style/Style';\n\nexport interface Styles {\n  [key: string]: Style;\n}\n\nexport const styles: Styles = {\n  Point: new Style({\n    image: new Circle({\n      fill: new Fill({\n        color: 'rgb(255,255,0,1)',\n      }),\n      stroke: new Stroke({ color: 'rgba(0,60,136)', width: 1 }),\n      radius: 5,\n    }),\n  }),\n  MultiLineString: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0,60,136)',\n      width: 4,\n    }),\n  }),\n};\n","import Feature from 'ol/Feature';\nimport Geometry from 'ol/geom/Geometry';\nimport MultiLineString from 'ol/geom/MultiLineString';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { default as OLMap } from 'ol/Map';\nimport VectorSource from 'ol/source/Vector';\nimport React, {\n  Fragment,\n  memo,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { getMultiLineStringFeature, getPointFeatures } from '../../util/util';\nimport { GpxSource } from './GpxSource';\nimport { styles } from './styles';\n\nconst vectorLayer = new VectorLayer();\nvectorLayer.set('id', 'gpx-vector-layer');\nvectorLayer.setStyle((feature) => {\n  const type = feature.getGeometry().getType().toString();\n  return styles[type];\n});\n\nexport interface GpxLayerProps {\n  map: OLMap;\n  gpxUrl: string;\n  showMarkers: boolean;\n  showRoute: boolean;\n  onSourceReady: (vectorSource: VectorSource) => void;\n  children: (\n    gpxVectorLayer: VectorLayer,\n    multiLineStringFeature?: Feature<MultiLineString>\n  ) => ReactNode;\n}\n\nexport const GpxLayer: React.FunctionComponent<GpxLayerProps> = memo(\n  ({ map, onSourceReady, gpxUrl, showMarkers, showRoute, children }) => {\n    const [gpxMarkers, setGpxMarkers] = useState<Feature<Geometry>[]>([]);\n    const [multiLineStringFeature, setMultiLineStringFeature] = useState<\n      Feature<MultiLineString>\n    >();\n\n    const toggleMarkers = useCallback(\n      (show: boolean) => {\n        const source = vectorLayer.getSource();\n        if (show) {\n          if (!getPointFeatures(source.getFeatures()).length) {\n            gpxMarkers.forEach((markerPoint) => {\n              source.addFeature(markerPoint);\n            });\n          }\n        } else {\n          gpxMarkers.forEach((markerPoint) =>\n            source.removeFeature(markerPoint)\n          );\n        }\n      },\n      [gpxMarkers]\n    );\n\n    const toggleRoute = useCallback(\n      (show: boolean) => {\n        if (!multiLineStringFeature) {\n          return;\n        }\n        if (show) {\n          const source = vectorLayer.getSource();\n          if (!getMultiLineStringFeature(source.getFeatures())) {\n            vectorLayer.getSource().addFeature(multiLineStringFeature);\n          }\n        } else {\n          vectorLayer.getSource().removeFeature(multiLineStringFeature);\n        }\n      },\n      [multiLineStringFeature]\n    );\n\n    const onReady = useCallback(\n      (vectorSource: VectorSource) => {\n        onSourceReady(vectorSource);\n        const features = vectorSource.getFeatures();\n        setGpxMarkers(getPointFeatures(features));\n        setMultiLineStringFeature(getMultiLineStringFeature(features));\n      },\n      [onSourceReady]\n    );\n\n    useEffect(() => {\n      map.addLayer(vectorLayer);\n    }, [map]);\n\n    useEffect(() => {\n      toggleMarkers(showMarkers);\n    }, [showMarkers, toggleMarkers]);\n\n    useEffect(() => {\n      toggleRoute(showRoute);\n    }, [showRoute, toggleRoute]);\n\n    return (\n      <Fragment>\n        <GpxSource\n          gpxUrl={gpxUrl}\n          vectorLayer={vectorLayer}\n          onReady={onReady}\n        />\n        {children && children(vectorLayer)}\n      </Fragment>\n    );\n  }\n);\n","import classNames from 'classnames/bind';\nimport * as Popper from 'popper.js';\nimport React, { memo, useEffect, useRef, useState } from 'react';\nimport Tooltip from 'reactstrap/lib/Tooltip';\nimport STYLES from './ControlButton.module.scss';\n\nconst c = classNames.bind(STYLES);\n\ntype ButtonProps = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport type ControlButtonProps = ButtonProps & {\n  onClick: () => void;\n  className?: string;\n  buttonClassName?: string;\n  tooltip?: string;\n  tooltipPlacement?: Popper.Placement;\n};\n\nexport const ControlButton: React.FunctionComponent<ControlButtonProps> = memo(\n  ({\n    children,\n    onClick,\n    className,\n    buttonClassName,\n    tooltip,\n    tooltipPlacement = 'bottom',\n    ...rest\n  }) => {\n    const [tooltipOpen, setTooltipOpen] = useState<boolean>(false);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n      buttonRef?.current?.addEventListener('click', onClick);\n      const current = buttonRef?.current;\n      return () => {\n        current?.removeEventListener('click', onClick);\n      };\n    });\n\n    const toggleTooltip = () => {\n      setTooltipOpen(!tooltipOpen);\n    };\n\n    return (\n      <div className={c(STYLES.ControlButton__container, className)}>\n        <button\n          className={c(STYLES.ControlButton, buttonClassName)}\n          type=\"button\"\n          ref={buttonRef}\n          {...rest}\n        >\n          {children}\n        </button>\n        {tooltip && buttonRef.current && (\n          <Tooltip\n            placement={tooltipPlacement}\n            isOpen={tooltipOpen}\n            target={buttonRef.current}\n            toggle={toggleTooltip}\n            delay={{ show: 0, hide: 0 }}\n            modifiers={{\n              offset: {\n                offset: '0,5',\n              },\n            }}\n          >\n            {tooltip}\n          </Tooltip>\n        )}\n      </div>\n    );\n  }\n);\n","import React, { ChangeEvent } from 'react';\nimport { default as ReactStrapForm } from 'reactstrap/lib/Form';\n\nexport const INPUT_TYPES = {\n  checkbox: 'checkbox',\n};\n\nexport interface FormProps {\n  onChange: (name: string, value: string | boolean) => void;\n}\n\nexport const Form: React.FunctionComponent<FormProps> = ({\n  onChange,\n  children,\n}) => {\n  const onInputChange = (event: ChangeEvent<HTMLFormElement>) => {\n    const { name, type, checked, value: targetValue } = event.target;\n    const value = type === INPUT_TYPES.checkbox ? checked : targetValue;\n    onChange(name, value);\n  };\n\n  return <ReactStrapForm onChange={onInputChange}>{children}</ReactStrapForm>;\n};\n\nexport default Form;\n","import { default as OLMap } from 'ol/Map';\nimport VectorSource from 'ol/source/Vector';\nimport React, { Fragment, useState } from 'react';\nimport { IoMdDownload } from 'react-icons/io';\nimport { useDispatch } from 'react-redux';\nimport { hideSpinner, showSpinner } from '../../../features/spinner';\n\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\nimport { INPUT_TYPES } from '../../Form/Form';\nimport ModalHeader from 'reactstrap/lib/ModalHeader';\nimport Modal from 'reactstrap/lib/Modal';\nimport ModalBody from 'reactstrap/lib/ModalBody';\nimport Form from 'reactstrap/lib/Form';\nimport FormGroup from 'reactstrap/lib/FormGroup';\nimport Label from 'reactstrap/lib/Label';\nimport Input from 'reactstrap/lib/Input';\nimport Col from 'reactstrap/lib/Col';\nimport Alert from 'reactstrap/lib/Alert';\nimport Button from 'reactstrap/lib/Button';\nimport { PDF_OPTION_ALL, PDF_OPTION_CURRENT } from '../../../util/constants';\nimport { PDFFormat } from '../../../util/types';\n\nexport interface DownloadControlButtonProps {\n  map: OLMap;\n  source: VectorSource;\n}\n\nexport interface DownloadOptions {\n  includeGPX: boolean;\n  includePDF: boolean;\n  pdfOption: 'all' | 'current';\n  pdfFormat: PDFFormat;\n  pdfResolution: number;\n}\n\nexport const DownloadControlButton: React.FunctionComponent<\n  DownloadControlButtonProps & Omit<ControlButtonProps, 'onClick'>\n> = ({ map, source, ...rest }) => {\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [downloadOptions, setDownloadOptions] = useState<DownloadOptions>({\n    includeGPX: true,\n    includePDF: true,\n    pdfOption: 'all',\n    pdfFormat: 'a4',\n    pdfResolution: 150,\n  });\n\n  const dispatch = useDispatch();\n\n  const onButtonCLick = () => {\n    setModalOpen(true);\n  };\n\n  const onChange = (name: string, value: string | boolean) => {\n    setDownloadOptions({\n      ...downloadOptions,\n      [name]: value,\n    });\n  };\n\n  const onFieldChange = ({ target }: { target: HTMLInputElement }) => {\n    const { name, type, checked, value: targetValue } = target;\n    const value = type === INPUT_TYPES.checkbox ? checked : targetValue;\n    onChange(name, value);\n  };\n\n  const download = async () => {\n    const { downloadZipFile } = await import(\n      /* webpackChunkName: \"download-util\" */ '../../../util/download'\n    );\n    const {\n      pdfFormat,\n      pdfResolution,\n      includePDF,\n      includeGPX,\n      pdfOption,\n    } = downloadOptions;\n    await downloadZipFile(\n      map,\n      source,\n      includeGPX,\n      includePDF,\n      pdfFormat,\n      pdfResolution,\n      pdfOption,\n      () => dispatch(showSpinner()),\n      () => dispatch(hideSpinner())\n    );\n  };\n\n  const onDownloadButtonClick = () => {\n    setModalOpen(false);\n    void download(); // FIXME: handle error\n  };\n\n  const toggle = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <Fragment>\n      <ControlButton {...rest} onClick={onButtonCLick} tooltipPlacement=\"right\">\n        <IoMdDownload />\n      </ControlButton>\n      <Modal isOpen={modalOpen} toggle={toggle} centered>\n        <ModalHeader toggle={toggle}>Download Options</ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    name=\"includeGPX\"\n                    checked={downloadOptions.includeGPX}\n                    onChange={onFieldChange}\n                  />{' '}\n                  Include GPX\n                </Label>\n              </FormGroup>\n              <FormGroup check>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    name=\"includePDF\"\n                    checked={downloadOptions.includePDF}\n                    onChange={onFieldChange}\n                  />{' '}\n                  Include PDF\n                </Label>\n              </FormGroup>\n              {downloadOptions.includePDF && (\n                <FormGroup style={{ paddingLeft: '1.5em' }}>\n                  <FormGroup row>\n                    <Label for=\"pdfFormat\" sm={4}>\n                      Page size\n                    </Label>\n                    <Col sm={8}>\n                      <Input\n                        type=\"select\"\n                        id=\"pdfFormat\"\n                        onChange={onFieldChange}\n                        name=\"pdfFormat\"\n                        value={downloadOptions.pdfFormat}\n                      >\n                        <option value=\"a0\">A0 (slow)</option>\n                        <option value=\"a1\">A1</option>\n                        <option value=\"a2\">A2</option>\n                        <option value=\"a3\">A3</option>\n                        <option value=\"a4\">A4</option>\n                        <option value=\"a5\">A5 (fast)</option>\n                      </Input>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Label for=\"pdfFormat\" sm={4}>\n                      Resolution\n                    </Label>\n                    <Col sm={8}>\n                      <Input\n                        type=\"select\"\n                        id=\"pdfResolution\"\n                        onChange={onFieldChange}\n                        name=\"pdfResolution\"\n                        value={downloadOptions.pdfResolution}\n                      >\n                        <option value=\"72\">72 dpi (fast)</option>\n                        <option value=\"150\">150 dpi</option>\n                        <option value=\"300\">300 dpi (slow)</option>\n                      </Input>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Label sm={4}>Pages</Label>\n                    <Col sm={8}>\n                      <FormGroup check>\n                        <Label check>\n                          <Input\n                            type=\"radio\"\n                            name=\"pdfOption\"\n                            value={PDF_OPTION_ALL}\n                            checked={\n                              downloadOptions.pdfOption === PDF_OPTION_ALL\n                            }\n                            onChange={onFieldChange}\n                          />{' '}\n                          All Stages\n                        </Label>\n                      </FormGroup>\n                      <FormGroup check>\n                        <Label check>\n                          <Input\n                            type=\"radio\"\n                            name=\"pdfOption\"\n                            value={PDF_OPTION_CURRENT}\n                            checked={\n                              downloadOptions.pdfOption === PDF_OPTION_CURRENT\n                            }\n                            onChange={onFieldChange}\n                          />{' '}\n                          Current View\n                        </Label>\n                      </FormGroup>\n                    </Col>\n                  </FormGroup>\n                </FormGroup>\n              )}\n            </FormGroup>\n            {downloadOptions.includePDF &&\n              downloadOptions.pdfOption === PDF_OPTION_ALL && (\n                <Alert color=\"warning\">\n                  Please note it might take some time to generate the PDF.\n                </Alert>\n              )}\n\n            <Button\n              onClick={onDownloadButtonClick}\n              disabled={\n                !downloadOptions.includeGPX && !downloadOptions.includePDF\n              }\n            >\n              Download\n            </Button>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </Fragment>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/baseline-my_location-24px-yellow.bf46ab87.svg\";","import Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport { default as OLMap } from 'ol/Map';\nimport { fromLonLat } from 'ol/proj';\nimport VectorSource from 'ol/source/Vector';\nimport Icon from 'ol/style/Icon';\nimport Style from 'ol/style/Style';\nimport React, { useEffect, useMemo } from 'react';\nimport { MdMyLocation } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\nimport { hideSpinner, showSpinner } from '../../../features/spinner';\nimport { getLayerById } from '../../../util/util';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\nimport marker from './baseline-my_location-24px-yellow.svg';\n\nconst LAYER_ID = 'mylocation_layer';\nconst FEATURE_ID = 'mylocation_feature';\nconst ANIMATION_DURATION = 1000;\n\nexport interface MyLocationControlButtonProps {\n  map: OLMap;\n}\n\nexport const MyLocationControlButton: React.FunctionComponent<\n  MyLocationControlButtonProps & Omit<ControlButtonProps, 'onClick'>\n> = ({ map, ...rest }) => {\n  const dispatch = useDispatch();\n\n  const feature = useMemo<Feature>(() => {\n    const _feature = new Feature({\n      name: 'My Location',\n    });\n    _feature.setId(FEATURE_ID);\n    _feature.setStyle(\n      new Style({\n        image: new Icon({\n          anchor: [0.5, 0.5],\n          src: marker,\n        }),\n      })\n    );\n    return _feature;\n  }, []);\n\n  const vectorLayer = useMemo<VectorLayer>(() => {\n    const _vectorLayer = new VectorLayer({\n      source: new VectorSource({\n        features: [feature],\n      }),\n    });\n    _vectorLayer.set('id', LAYER_ID);\n    return _vectorLayer;\n  }, [feature]);\n\n  useEffect(() => {\n    return () => {\n      map.removeLayer(vectorLayer);\n    };\n  }, [feature, vectorLayer, map]);\n\n  const onGetCurrentPosition = (position: Position) => {\n    dispatch(hideSpinner());\n\n    const coords = fromLonLat([\n      position.coords.longitude,\n      position.coords.latitude,\n    ]);\n\n    vectorLayer\n      .getSource()\n      .getFeatureById(FEATURE_ID)\n      .setGeometry(new Point(coords));\n\n    map.getView().animate({\n      center: coords,\n      duration: ANIMATION_DURATION,\n    });\n  };\n\n  const onButtonCLick = () => {\n    if ('geolocation' in navigator) {\n      dispatch(showSpinner());\n      if (!getLayerById(map, LAYER_ID)) {\n        map.addLayer(vectorLayer);\n      }\n      navigator.geolocation.getCurrentPosition(onGetCurrentPosition);\n    } else {\n      // eslint-disable-next-line no-alert\n      alert('Geolocation is not supported in your browser');\n    }\n  };\n\n  return (\n    <ControlButton tooltipPlacement=\"right\" onClick={onButtonCLick} {...rest}>\n      <MdMyLocation />\n    </ControlButton>\n  );\n};\n","import { default as OLMap } from 'ol/Map';\nimport React from 'react';\nimport { FaFilePdf } from 'react-icons/fa';\nimport { useDispatch } from 'react-redux';\nimport { hideSpinner, showSpinner } from '../../../features/spinner';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\n\nexport interface PdfExportControlButtonProps {\n  map: OLMap;\n}\n\nexport const PdfExportControlButton: React.FunctionComponent<\n  PdfExportControlButtonProps & Omit<ControlButtonProps, 'onClick'>\n> = ({ map, ...rest }) => {\n  const dispatch = useDispatch();\n\n  const onButtonCLick = async () => {\n    dispatch(showSpinner());\n    const { exportMapToPDF } = await import(\n      /* webpackChunkName: \"pdf-util\" */ '../../../util/pdf'\n    );\n    const pdf = await exportMapToPDF(map);\n    pdf.save('map.pdf');\n    dispatch(hideSpinner());\n  };\n\n  return (\n    <ControlButton tooltipPlacement=\"right\" onClick={onButtonCLick} {...rest}>\n      <FaFilePdf />\n    </ControlButton>\n  );\n};\n","import { default as OLMap } from 'ol/Map';\nimport React from 'react';\nimport { MdZoomOutMap } from 'react-icons/md';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\n\nconst ANIMATION_DURATION = 1000;\n\ninterface ZoomToExtentControlButtonProps {\n  map: OLMap;\n}\n\nexport const ZoomToExtentControlButton: React.FunctionComponent<\n  ZoomToExtentControlButtonProps & Omit<ControlButtonProps, 'onClick'>\n> = ({ map, ...rest }) => {\n  const onButtonCLick = () => {\n    const view = map.getView();\n    view.fit(\n      [\n        978823.488305482,\n        5121096.608475749,\n        1039463.1111227559,\n        5245134.752643153,\n      ],\n      {\n        duration: ANIMATION_DURATION,\n      }\n    );\n  };\n\n  return (\n    <ControlButton tooltipPlacement=\"right\" onClick={onButtonCLick} {...rest}>\n      <MdZoomOutMap />\n    </ControlButton>\n  );\n};\n","import Attribution from 'ol/control/Attribution';\nimport ScaleLine from 'ol/control/ScaleLine';\nimport Zoom from 'ol/control/Zoom';\n\nexport const zoomControl = new Zoom();\n\nexport const attributionControl = new Attribution({\n  collapsible: true,\n});\n\nexport const scaleLineControl = new ScaleLine({\n  units: 'metric',\n  minWidth: 100,\n});\n\nconst controls = [zoomControl, attributionControl, scaleLineControl];\n\nexport default controls;\n","import classNames from 'classnames/bind';\nimport { default as OLMap } from 'ol/Map';\nimport VectorSource from 'ol/source/Vector';\nimport React, { createRef, useEffect } from 'react';\nimport { DownloadControlButton } from '../ControlButtons/DownloadControlButton/DownloadControlButton';\nimport { MyLocationControlButton } from '../ControlButtons/MyLocationControlButton/MyLocationControlButton';\nimport { PdfExportControlButton } from '../ControlButtons/PdfExportControlButton/PdfExportControlButton';\nimport { ZoomToExtentControlButton } from '../ControlButtons/ZoomToExtentControlButton/ZoomToExtentControlButton';\nimport controls, { zoomControl } from './controls';\nimport STYLES from './MapControls.module.scss';\n\nconst c = classNames.bind(STYLES);\n\nexport interface MapControlsProps {\n  map: OLMap;\n  source: VectorSource;\n}\n\nexport const MapControls: React.FunctionComponent<MapControlsProps> = ({\n  map,\n  source,\n}) => {\n  const zoomContainerRef = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    zoomControl.setTarget(zoomContainerRef.current!);\n    controls.forEach((control) => map.addControl(control));\n    return () => {\n      controls.forEach((control) => map.removeControl(control));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const buttonProps = {\n    map,\n    className: c('MapControls__button-control'),\n  };\n  return (\n    <div className={STYLES.MapControls}>\n      <div ref={zoomContainerRef} />\n      <ZoomToExtentControlButton tooltip=\"Fit Extent\" {...buttonProps} />\n      {/* <FullScreenControlButton tooltip=\"Toggle full-screen\" {...buttonProps} /> */}\n      <PdfExportControlButton tooltip=\"Export to PDF\" {...buttonProps} />\n      <DownloadControlButton\n        tooltip=\"Download Route and Maps\"\n        source={source}\n        {...buttonProps}\n      />\n      {/* <GetLinkControlButton tooltip=\"Get Shareable Link\" {...buttonProps} /> */}\n      <MyLocationControlButton tooltip=\"Show My Location\" {...buttonProps} />\n      {/* <ControlIcon target={rotateNorthButton}>\n          <MdRotateLeft />\n        </ControlIcon> */}\n    </div>\n  );\n};\n","import React, { memo } from 'react';\nimport { FaTimes } from 'react-icons/fa';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\nimport STYLES from '../ControlButton/ControlButton.module.scss';\n\nexport const CloseControlButton: React.FunctionComponent<Omit<\n  ControlButtonProps,\n  'className' | 'buttonClassName'\n>> = memo((props) => (\n  <ControlButton\n    className={STYLES.ControlButton__close}\n    buttonClassName={STYLES['ControlButton__close-button']}\n    {...props}\n  >\n    <FaTimes />\n  </ControlButton>\n));\n","import { Coordinate } from 'ol/coordinate';\nimport { default as OLMap } from 'ol/Map';\nimport { fromLonLat } from 'ol/proj';\nimport React, { memo } from 'react';\nimport { MdZoomIn } from 'react-icons/md';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\n\nexport const ANIMATION_DURATION = 800;\n\nexport interface ZoomInControlButtonProps {\n  lonLat: Coordinate;\n  map: OLMap;\n}\n\nexport const ZoomInControlButton: React.FunctionComponent<\n  ZoomInControlButtonProps & Omit<ControlButtonProps, 'onClick'>\n> = memo(({ lonLat, map, ...rest }) => {\n  const onClick = () => {\n    map.getView().animate({\n      center: fromLonLat(lonLat),\n      zoom: 18,\n      duration: ANIMATION_DURATION,\n    });\n  };\n  return (\n    <ControlButton {...rest} onClick={onClick}>\n      <MdZoomIn />\n    </ControlButton>\n  );\n});\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 7C6.48 7 2 9.24 2 12c0 2.24 2.94 4.13 7 4.77V20l4-4-4-4v2.73c-3.15-.56-5-1.9-5-2.73 0-1.06 3.04-3 8-3s8 1.94 8 3c0 .73-1.46 1.89-4 2.53v2.05c3.53-.77 6-2.53 6-4.58 0-2.76-4.48-5-10-5z\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0z\"\n});\n\nfunction Svg36024Px(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"currentColor\",\n    width: \"1.2em\",\n    height: \"1.2em\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(Svg36024Px);\nexport default __webpack_public_path__ + \"static/media/360-24px.9a39ff9e.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Fragment, useState } from 'react';\nimport Modal from 'reactstrap/lib/Modal';\nimport ModalBody from 'reactstrap/lib/ModalBody';\nimport ModalHeader from 'reactstrap/lib/ModalHeader';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\nimport { ReactComponent as Icon360 } from './360-24px.svg';\n\nexport interface Google360ControlButtonProps {\n  pointName: string;\n  embedUrl: string;\n}\n\nexport const Google360ControlButton: React.FunctionComponent<\n  Google360ControlButtonProps & Omit<ControlButtonProps, 'onClick'>\n> = ({ pointName, embedUrl, ...rest }) => {\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  const toggle = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <Fragment>\n      <ControlButton {...rest} onClick={toggle}>\n        <Icon360 />\n      </ControlButton>\n      <Modal\n        isOpen={modalOpen}\n        toggle={toggle}\n        centered\n        style={{ maxWidth: '800px' }}\n      >\n        <ModalHeader toggle={toggle}>{pointName} 360</ModalHeader>\n        <ModalBody>\n          <iframe\n            title=\"Google Maps 360\"\n            src={embedUrl}\n            width=\"100%\"\n            height=\"450\"\n            frameBorder=\"0\"\n            style={{ border: 0 }}\n            allowFullScreen\n          />\n        </ModalBody>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default Google360ControlButton;\n","import React, { memo } from 'react';\nimport { FaCaretRight } from 'react-icons/fa';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\n\nexport const NextPointControlButton: React.FunctionComponent<ControlButtonProps> = memo(\n  (props) => (\n    <ControlButton {...props}>\n      <FaCaretRight />\n    </ControlButton>\n  )\n);\n","import React, { memo } from 'react';\nimport { FaCaretLeft } from 'react-icons/fa';\nimport {\n  ControlButton,\n  ControlButtonProps,\n} from '../ControlButton/ControlButton';\n\nexport const PrevPointControlButton: React.FunctionComponent<ControlButtonProps> = memo(\n  (props) => (\n    <ControlButton {...props}>\n      <FaCaretLeft />\n    </ControlButton>\n  )\n);\n","import { Coordinate } from 'ol/coordinate';\nimport React from 'react';\nimport { default as OLMap } from 'ol/Map';\nimport classNames from 'classnames/bind';\n\nimport { ZoomInControlButton } from '../../ControlButtons/ZoomInControlButton/ZoomInControlButton';\nimport Google360ControlButton from '../../ControlButtons/Google360ControlButton/Google360ControlButton';\nimport { NextPointControlButton } from '../../ControlButtons/NextPointControlButton/NextPointControlButton';\nimport { PrevPointControlButton } from '../../ControlButtons/PrevPointControlButton/PrevPointControlButton';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport STYLES from './PopupFooter.module.scss';\n\nconst c = classNames.bind(STYLES);\n\nexport interface PopupFooterProps {\n  map: OLMap;\n  lonLat: Coordinate;\n  buttonClassName: string;\n  onPrevPointButtonClick: () => void;\n  onNextPointButtonClick: () => void;\n  prevFeature?: Feature<Point>;\n  nextFeature?: Feature<Point>;\n  google360Url: string;\n  name: string;\n}\n\nexport const PopupFooter: React.FunctionComponent<PopupFooterProps> = ({\n  map,\n  lonLat,\n  buttonClassName,\n  onPrevPointButtonClick,\n  onNextPointButtonClick,\n  prevFeature,\n  nextFeature,\n  google360Url,\n  name,\n}) => {\n  return (\n    <footer className={c('footer')}>\n      <ZoomInControlButton\n        lonLat={lonLat}\n        map={map}\n        tooltip=\"Zoom to Point\"\n        className={buttonClassName}\n      />\n      <PrevPointControlButton\n        onClick={onPrevPointButtonClick}\n        tooltip=\"Previous Point\"\n        className={buttonClassName}\n        disabled={!prevFeature}\n      />\n      <NextPointControlButton\n        onClick={onNextPointButtonClick}\n        tooltip=\"Next Point\"\n        className={buttonClassName}\n        disabled={!nextFeature}\n      />\n      {google360Url && name && (\n        <Google360ControlButton\n          tooltip=\"View 360\"\n          pointName={name}\n          embedUrl={google360Url}\n          className={buttonClassName}\n        />\n      )}\n    </footer>\n  );\n};\n","import Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport classNames from 'classnames/bind';\nimport React, { memo } from 'react';\nimport { getMultiCoordsFromNextFeature } from '../../../util/util';\nimport STYLES from '../PointData/PointData.module.scss';\nimport Table from 'reactstrap/lib/Table';\n\nconst c = classNames.bind(STYLES);\n\nexport interface NextPointDataProps {\n  gpxVectorLayer: VectorLayer;\n  feature: Feature<Point>;\n  nextFeature: Feature<Point>;\n}\n\nexport const NextPointData: React.FunctionComponent<NextPointDataProps> = memo(\n  ({ feature, nextFeature, gpxVectorLayer }) => {\n    const multiCoords = getMultiCoordsFromNextFeature(\n      feature,\n      nextFeature,\n      gpxVectorLayer\n    );\n    return (\n      <Table borderless className={c('table')}>\n        <tbody>\n          <tr>\n            <th scope=\"row\">Distance:</th>\n            <td>{multiCoords.distanceInKm}km</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Elevation gain:</th>\n            <td>{multiCoords.elevationGainUp}m</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Elevation loss:</th>\n            <td>{multiCoords.elevationGainDown}m</td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n);\n","import classNames from 'classnames/bind';\nimport React, { memo } from 'react';\nimport Table from 'reactstrap/lib/Table';\nimport STYLES from './PointData.module.scss';\n\nconst c = classNames.bind(STYLES);\n\nexport interface PointDataProps {\n  elevation: number;\n  lon: string;\n  lat: string;\n  hdms: string;\n}\n\nexport const PointData: React.FunctionComponent<PointDataProps> = memo(\n  ({ elevation, lon, lat, hdms }) => {\n    return (\n      <Table borderless className={c('table')}>\n        <tbody>\n          <tr>\n            <th scope=\"row\">Elevation:</th>\n            <td>{elevation}m</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Longitude:</th>\n            <td>{lon}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Latitude:</th>\n            <td>{lat}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Coordinates:</th>\n            <td>\n              <span className={c('coordinates')}>{hdms}</span>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n);\n","import Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames/bind';\n\nimport { NextPointData } from '../NextPointData/NextPointData';\nimport { PointData } from '../PointData/PointData';\nimport STYLES from './PopupBody.module.scss';\nimport PopoverBody from 'reactstrap/lib/PopoverBody';\nimport Nav from 'reactstrap/lib/Nav';\nimport NavItem from 'reactstrap/lib/NavItem';\nimport NavLink from 'reactstrap/lib/NavLink';\nimport TabContent from 'reactstrap/lib/TabContent';\nimport TabPane from 'reactstrap/lib/TabPane';\n\nconst c = classNames.bind(STYLES);\n\nexport interface PopupBodyProps {\n  gpxVectorLayer: VectorLayer;\n  feature: Feature<Point>;\n  nextFeature?: Feature<Point>;\n  prevFeature?: Feature<Point>;\n  elevation: number;\n  lon: string;\n  lat: string;\n  hdms: string;\n  scheduleUpdate: () => void;\n}\n\nexport const PopupBody: React.FunctionComponent<PopupBodyProps> = ({\n  gpxVectorLayer,\n  feature,\n  nextFeature,\n  prevFeature,\n  elevation,\n  lon,\n  lat,\n  hdms,\n  scheduleUpdate,\n}) => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = (tab: string) => {\n    if (activeTab !== tab) {\n      setActiveTab(tab);\n      scheduleUpdate();\n    }\n  };\n\n  useEffect(() => {\n    setActiveTab('1');\n  }, [feature]);\n  return (\n    <PopoverBody>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={c({ active: activeTab === '1' })}\n            href=\"#info\"\n            onClick={(e) => {\n              e.preventDefault();\n              toggle('1');\n            }}\n          >\n            Info\n          </NavLink>\n        </NavItem>\n\n        {nextFeature && (\n          <NavItem>\n            <NavLink\n              className={c({ active: activeTab === '2' })}\n              href=\"next\"\n              onClick={(e) => {\n                e.preventDefault();\n                toggle('2');\n              }}\n            >\n              Next Point\n            </NavLink>\n          </NavItem>\n        )}\n        {prevFeature && (\n          <NavItem>\n            <NavLink\n              className={c({ active: activeTab === '3' })}\n              href=\"#prev\"\n              onClick={(e) => {\n                e.preventDefault();\n                toggle('3');\n              }}\n            >\n              Previous Point\n            </NavLink>\n          </NavItem>\n        )}\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\" className={c('tab-pane')}>\n          <PointData elevation={elevation} lon={lon} lat={lat} hdms={hdms} />\n        </TabPane>\n        {nextFeature && (\n          <TabPane tabId=\"2\" className={c('tab-pane')}>\n            <NextPointData\n              gpxVectorLayer={gpxVectorLayer}\n              feature={feature}\n              nextFeature={nextFeature}\n            />\n          </TabPane>\n        )}\n        {prevFeature && (\n          <TabPane tabId=\"3\" className={c('tab-pane')}>\n            <NextPointData\n              gpxVectorLayer={gpxVectorLayer}\n              feature={prevFeature}\n              nextFeature={feature}\n            />\n          </TabPane>\n        )}\n      </TabContent>\n    </PopoverBody>\n  );\n};\n","import React, { Fragment, useEffect } from 'react';\nimport { Coordinate } from 'ol/coordinate';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport { default as OLMap } from 'ol/Map';\nimport { MdHome } from 'react-icons/md';\nimport { getDataFromCoords } from '../../../util/util';\nimport { CloseControlButton } from '../../ControlButtons/CloseControlButton/CloseControlButton';\nimport { PopupFooter } from '../PopupFooter/PopupFooter';\nimport { PopupBody } from '../PopupBody/PopupBody';\nimport PopoverHeader from 'reactstrap/lib/PopoverHeader';\n\nexport interface PopupContentProps {\n  map: OLMap;\n  scheduleUpdate: () => void;\n  onClose: () => void;\n  selectFeature: (feature: Feature<Point>) => void;\n  gpxVectorLayer: VectorLayer;\n  feature: Feature<Point>;\n  buttonClassName: string;\n  coordinates: Coordinate;\n  prevFeature?: Feature<Point>;\n  nextFeature?: Feature<Point>;\n}\n\nexport const PopupContent: React.FunctionComponent<PopupContentProps> = ({\n  map,\n  scheduleUpdate,\n  onClose,\n  gpxVectorLayer,\n  feature,\n  prevFeature,\n  nextFeature,\n  buttonClassName,\n  coordinates,\n  selectFeature,\n}) => {\n  const { lonLat, hdms, elevation } = getDataFromCoords(coordinates);\n  const { name, google360Url } = feature.getProperties();\n  const lon = (lonLat[0] || 0).toFixed(6);\n  const lat = (lonLat[1] || 0).toFixed(6);\n\n  const onNextPointButtonClick = () => {\n    if (nextFeature) {\n      selectFeature(nextFeature);\n    }\n  };\n\n  const onPrevPointButtonClick = () => {\n    if (prevFeature) {\n      selectFeature(prevFeature);\n    }\n  };\n\n  useEffect(() => {\n    scheduleUpdate();\n  }, [coordinates, scheduleUpdate]);\n\n  return (\n    <Fragment>\n      <PopoverHeader>\n        <CloseControlButton onClick={onClose} />\n        <MdHome size={20} style={{ verticalAlign: 'top' }} /> {name}\n        {!prevFeature && ' (Start)'}\n        {!nextFeature && ' (Finish)'}\n      </PopoverHeader>\n      <PopupBody\n        lon={lon}\n        lat={lat}\n        hdms={hdms}\n        elevation={elevation}\n        gpxVectorLayer={gpxVectorLayer}\n        feature={feature}\n        nextFeature={nextFeature}\n        prevFeature={prevFeature}\n        scheduleUpdate={scheduleUpdate}\n      />\n      <PopupFooter\n        map={map}\n        lonLat={lonLat}\n        name={name}\n        nextFeature={nextFeature}\n        prevFeature={prevFeature}\n        buttonClassName={buttonClassName}\n        onPrevPointButtonClick={onPrevPointButtonClick}\n        onNextPointButtonClick={onNextPointButtonClick}\n        google360Url={google360Url}\n      />\n    </Fragment>\n  );\n};\n","import classNames from 'classnames/bind';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport { default as OLMap } from 'ol/Map';\nimport Overlay from 'ol/Overlay';\nimport OverlayPositioning from 'ol/OverlayPositioning';\nimport React, { useEffect, useRef } from 'react';\nimport Popover from 'reactstrap/lib/Popover';\nimport { ANIMATION_DURATION } from './constants';\nimport STYLES from './Popup.module.scss';\nimport { PopupContent } from './PopupContent/PopupContent';\n\nconst c = classNames.bind(STYLES);\n\ninterface PopupProps {\n  map: OLMap;\n  isOpen: boolean;\n  onClose: () => void;\n  gpxVectorLayer: VectorLayer;\n  feature: Feature<Point>;\n  prevFeature?: Feature<Point>;\n  nextFeature?: Feature<Point>;\n  selectFeature: (feature: Feature<Point>) => void;\n}\n\nexport const Popup: React.FunctionComponent<PopupProps> = ({\n  map,\n  gpxVectorLayer,\n  onClose,\n  isOpen,\n  feature,\n  nextFeature,\n  prevFeature,\n  selectFeature,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const overlayRef = useRef<Overlay>();\n  const coordinates = feature.getGeometry().getCoordinates();\n\n  useEffect(() => {\n    overlayRef.current = new Overlay({\n      element: containerRef.current as HTMLElement,\n      positioning: OverlayPositioning.CENTER_CENTER,\n    });\n    map.addOverlay(overlayRef.current);\n  }, [map]);\n\n  useEffect(() => {\n    overlayRef.current?.setPosition(coordinates);\n    map.getView().animate({\n      center: coordinates,\n      duration: ANIMATION_DURATION,\n    });\n  }, [map, feature, coordinates]);\n\n  return (\n    <div id=\"popover-container\" ref={containerRef}>\n      <Popover\n        placement=\"top\"\n        isOpen={isOpen}\n        target={containerRef}\n        container={containerRef}\n        className={c('Popup')}\n        modifiers={{\n          hide: { enabled: false },\n          preventOverflow: { enabled: false },\n          flip: { enabled: false },\n        }}\n      >\n        {({ scheduleUpdate }) => {\n          return (\n            <PopupContent\n              map={map}\n              onClose={onClose}\n              gpxVectorLayer={gpxVectorLayer}\n              feature={feature}\n              nextFeature={nextFeature}\n              prevFeature={prevFeature}\n              scheduleUpdate={scheduleUpdate}\n              coordinates={coordinates}\n              buttonClassName={c('Popup__button-control')}\n              selectFeature={selectFeature}\n            />\n          );\n        }}\n      </Popover>\n    </div>\n  );\n};\n","export const ANIMATION_DURATION = 800;\n","export default __webpack_public_path__ + \"static/media/baseline-location_on-24px-yellow.1a07b598.svg\";","import { Color } from 'ol/color';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { default as OLMap } from 'ol/Map';\nimport STATE from 'ol/source/State';\nimport VectorSource from 'ol/source/Vector';\nimport Fill from 'ol/style/Fill';\nimport Icon from 'ol/style/Icon';\nimport Stroke from 'ol/style/Stroke';\nimport Style from 'ol/style/Style';\nimport Text from 'ol/style/Text';\nimport React, { memo, useEffect, useRef } from 'react';\nimport { getMultiLineStringFeature } from '../../util/util';\nimport yellowMarker from './baseline-location_on-24px-yellow.svg';\n\nconst pointTextStyle = (text: string, marker: string, color: Color | string) =>\n  new Style({\n    image: new Icon({\n      anchor: [0.5, 1],\n      src: marker,\n    }),\n    text: new Text({\n      text,\n      fill: new Fill({ color }),\n      stroke: new Stroke({ color: '#ffffff', width: 2 }),\n      font: 'bold 13px Arial',\n      offsetY: 12,\n    }),\n  });\n\nconst createPointTextFeature = (\n  name: string,\n  id: string,\n  color: Color | string,\n  marker: string\n) => {\n  const feature = new Feature({\n    name,\n  });\n  feature.setStyle(pointTextStyle(name, marker, color));\n  feature.setId(id);\n  return feature;\n};\n\nexport interface StartEndLayerProps {\n  map: OLMap;\n  gpxVectorLayer: VectorLayer;\n  gpxUrl: string;\n  showMarkers: boolean;\n}\n\nexport const START_POINT_ID = 'startPoint';\nexport const FINISH_POINT_ID = 'finishPoint';\n\nexport const StartEndLayer: React.FunctionComponent<StartEndLayerProps> = memo(\n  ({ map, gpxVectorLayer, gpxUrl, showMarkers }) => {\n    const startEndVectorLayer = useRef<VectorLayer>();\n\n    const toggleMarkers = (show: boolean) => {\n      startEndVectorLayer.current?.setVisible(show);\n    };\n\n    const onGpxVectorLayerStateChange = () => {\n      const gpxVectorSource = gpxVectorLayer.getSource();\n      if (\n        gpxVectorSource.getState() === STATE.READY &&\n        gpxVectorSource.getFeatures().length\n      ) {\n        const multiLineStringGeometry = getMultiLineStringFeature(\n          gpxVectorSource.getFeatures()\n        )?.getGeometry();\n        if (!multiLineStringGeometry) {\n          return;\n        }\n        const startFeature = createPointTextFeature(\n          'Start',\n          START_POINT_ID,\n          'rgba(0,60,136)',\n          yellowMarker\n        );\n        startFeature.setGeometry(\n          new Point(multiLineStringGeometry.getFirstCoordinate())\n        );\n\n        const endFeature = createPointTextFeature(\n          'Finish',\n          FINISH_POINT_ID,\n          'rgba(0,60,136)',\n          yellowMarker\n        );\n        endFeature.setGeometry(\n          new Point(multiLineStringGeometry.getLastCoordinate())\n        );\n\n        const startEndSource = new VectorSource({\n          features: [startFeature, endFeature],\n        });\n\n        startEndVectorLayer.current?.setSource(startEndSource);\n        toggleMarkers(true);\n      }\n    };\n\n    useEffect(() => {\n      startEndVectorLayer.current = new VectorLayer();\n      startEndVectorLayer.current.setZIndex(2);\n      map.addLayer(startEndVectorLayer.current);\n      return () => {\n        if (startEndVectorLayer.current) {\n          map.removeLayer(startEndVectorLayer.current);\n        }\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n      toggleMarkers(false);\n      gpxVectorLayer.once('change', onGpxVectorLayerStateChange);\n      return () => {\n        gpxVectorLayer.un('change', onGpxVectorLayerStateChange);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [gpxUrl]);\n\n    useEffect(() => {\n      toggleMarkers(showMarkers);\n    }, [showMarkers]);\n\n    return null;\n  }\n);\n","import Tile from 'ol/layer/Tile';\nimport { default as OLMap } from 'ol/Map';\nimport OSM from 'ol/source/OSM';\nimport { expandUrl } from 'ol/tileurlfunction';\nimport React, { Component } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport maps from '../../data/maps/maps.json';\n\nconst urls = maps.map(({ url }) => expandUrl(url)).flat();\n\nexport interface TileLayerProps {\n  map: OLMap;\n  mapUrl: string;\n}\n\nexport class TileLayer extends Component<TileLayerProps> {\n  private xyzSource: OSM;\n  private rasterLayer: Tile;\n  constructor(props: TileLayerProps) {\n    super(props);\n    this.xyzSource = new OSM();\n    this.rasterLayer = new Tile({\n      source: this.xyzSource,\n    });\n    this.rasterLayer.set('id', 'osmtilelayer');\n  }\n\n  componentDidMount(): void {\n    const { map, mapUrl } = this.props;\n    map.addLayer(this.rasterLayer);\n    this.xyzSource.setUrl(mapUrl);\n  }\n\n  componentDidUpdate(): void {\n    const { mapUrl } = this.props;\n    this.xyzSource.setUrl(mapUrl);\n  }\n\n  componentWillUnmount(): void {\n    const { map } = this.props;\n    map.removeLayer(this.rasterLayer);\n  }\n\n  render(): React.ReactNode {\n    return (\n      <Helmet>\n        {urls.map((url) => (\n          <link key={url} href={new URL(url).origin} rel=\"preconnect\" />\n        ))}\n      </Helmet>\n    );\n  }\n}\n","// import sync from 'ol-hashed';\nimport Feature, { FeatureLike } from 'ol/Feature';\nimport GeometryType from 'ol/geom/GeometryType';\nimport Point from 'ol/geom/Point';\nimport { default as OLMap } from 'ol/Map';\nimport MapBrowserEvent from 'ol/MapBrowserEvent';\nimport MapBrowserEventType from 'ol/MapBrowserEventType';\nimport { fromLonLat } from 'ol/proj';\nimport VectorSource from 'ol/source/Vector';\nimport View from 'ol/View';\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport {\n  getNextFeature,\n  getPrevFeature,\n  getSortedPointFeatures,\n} from '../../util/util';\nimport { GpxLayer } from '../GpxLayer/GpxLayer';\nimport { MapControls } from '../MapControls/MapControls';\nimport { Popup } from '../Popup/Popup';\nimport {\n  FINISH_POINT_ID,\n  StartEndLayer,\n  START_POINT_ID,\n} from '../StartEndLayer/StartEndLayer';\nimport { TileLayer } from '../TileLayer/TileLayer';\nimport STYLES from './Map.module.scss';\nimport 'ol/ol.css';\n\nconst initialState = {\n  lat: 42.184207,\n  lng: 9.1079,\n  zoom: 9,\n};\n\nconst pointSelectEvents = [MapBrowserEventType.POINTERDOWN];\n\nfunction isGpxWayPoint(feature: FeatureLike) {\n  return (\n    feature.getGeometry().getType() === GeometryType.POINT &&\n    feature.getId() !== START_POINT_ID &&\n    feature.getId() !== FINISH_POINT_ID\n  );\n}\n\nexport const Map: React.FunctionComponent = ({ children }) => {\n  const mapRef = React.createRef<HTMLDivElement>();\n  const [isPopupOpen, setIsPopupOpen] = useState<boolean>(false);\n  const [selectedFeature, setSelectedFeature] = useState<Feature<Point>>();\n  const [sortedPointFeatures, setSortedPointFeatures] = useState<\n    Feature<Point>[]\n  >();\n  const { mapUrl, gpxUrl, showControls, showMarkers, showRoute } = useSelector(\n    (state: RootState) => state.settings\n  );\n\n  const map = useMemo<OLMap>(\n    () =>\n      new OLMap({\n        pixelRatio: 1,\n        controls: [],\n      }),\n    []\n  );\n\n  const nextFeature =\n    selectedFeature &&\n    sortedPointFeatures &&\n    getNextFeature(selectedFeature, sortedPointFeatures);\n\n  const prevFeature =\n    selectedFeature &&\n    sortedPointFeatures &&\n    getPrevFeature(selectedFeature, sortedPointFeatures);\n\n  const onPopupClose = useCallback(() => {\n    setIsPopupOpen(false);\n  }, []);\n\n  const onMapPointerMove = (evt: MapBrowserEvent<UIEvent>) => {\n    if (\n      (evt.originalEvent?.target as HTMLElement).nodeName.toLowerCase() ===\n      'canvas'\n    ) {\n      const pixel = map.getEventPixel(evt.originalEvent);\n      const features: FeatureLike[] = [];\n      map.forEachFeatureAtPixel(pixel, (feature) => {\n        features.push(feature);\n      });\n      const pointFeature = features.find(isGpxWayPoint);\n      (map.getTarget() as HTMLDivElement).style.cursor = pointFeature\n        ? 'pointer'\n        : '';\n    }\n  };\n\n  const onMapClick = (evt: MapBrowserEvent<UIEvent>) => {\n    const features = map.getFeaturesAtPixel(evt.pixel, { hitTolerance: 4 });\n    if (features && features.length) {\n      const feature = features.find(isGpxWayPoint);\n      if (feature) {\n        evt.preventDefault();\n        setSelectedFeature(feature as Feature<Point>);\n        setIsPopupOpen(true);\n      }\n    } else if (\n      (evt.originalEvent?.target as HTMLElement).nodeName.toLowerCase() ===\n      'canvas'\n    ) {\n      setIsPopupOpen(false);\n    }\n  };\n\n  const selectFeature = useCallback((feature: Feature<Point>) => {\n    setSelectedFeature(feature);\n  }, []);\n\n  useEffect(() => {\n    const { lat, lng, zoom } = initialState;\n    const target = mapRef.current;\n    if (target) {\n      const view = new View({\n        center: fromLonLat([lng, lat]),\n        zoom,\n      });\n      map.setTarget(target);\n      map.setView(view);\n      map.on('pointermove', onMapPointerMove);\n    }\n\n    pointSelectEvents.forEach((eventType) => map.on(eventType, onMapClick));\n\n    return () => {\n      if (target) {\n        map.un('pointermove', onMapPointerMove);\n      }\n      pointSelectEvents.forEach((eventType) => map.un(eventType, onMapClick));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onGpxSourceReady = useCallback((vectorSource: VectorSource) => {\n    const sortedFeatures = getSortedPointFeatures(vectorSource);\n    setSortedPointFeatures(sortedFeatures);\n  }, []);\n\n  return (\n    <div className={STYLES.Map} ref={mapRef}>\n      <GpxLayer\n        gpxUrl={gpxUrl}\n        showMarkers={showMarkers}\n        showRoute={showRoute}\n        onSourceReady={onGpxSourceReady}\n        map={map}\n      >\n        {(gpxVectorLayer) => {\n          return (\n            <Fragment>\n              {showControls && (\n                <MapControls map={map} source={gpxVectorLayer.getSource()} />\n              )}\n              <StartEndLayer\n                map={map}\n                gpxVectorLayer={gpxVectorLayer}\n                showMarkers={showMarkers}\n                gpxUrl={gpxUrl}\n              />\n              {selectedFeature && (\n                <Popup\n                  map={map}\n                  gpxVectorLayer={gpxVectorLayer}\n                  feature={selectedFeature}\n                  nextFeature={nextFeature}\n                  prevFeature={prevFeature}\n                  isOpen={isPopupOpen}\n                  onClose={onPopupClose}\n                  selectFeature={selectFeature}\n                />\n              )}\n            </Fragment>\n          );\n        }}\n      </GpxLayer>\n      <TileLayer map={map} mapUrl={mapUrl} />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport ButtonDropdown from 'reactstrap/lib/ButtonDropdown';\n\nexport const Dropdown: React.FunctionComponent = ({ children }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onMouseEnter = () => {\n    setIsOpen(true);\n  };\n\n  const onMouseLeave = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <ButtonDropdown\n      isOpen={isOpen}\n      toggle={toggle}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </ButtonDropdown>\n  );\n};\n\nexport default Dropdown;\n","import React from 'react';\nimport { IoMdCheckmark } from 'react-icons/io';\nimport ButtonGroup from 'reactstrap/lib/ButtonGroup';\nimport ButtonToolbar from 'reactstrap/lib/ButtonToolbar';\nimport DropdownItem from 'reactstrap/lib/DropdownItem';\nimport DropdownMenu from 'reactstrap/lib/DropdownMenu';\nimport DropdownToggle from 'reactstrap/lib/DropdownToggle';\nimport FormGroup from 'reactstrap/lib/FormGroup';\nimport Input from 'reactstrap/lib/Input';\nimport Label from 'reactstrap/lib/Label';\n\nimport Dropdown from '../Dropdown/Dropdown';\nimport { INPUT_TYPES } from '../Form/Form';\nimport { DropdownOption, SelectedOptions } from '../Settings/types';\nimport STYLES from './DropdownGroup.module.scss';\n\nexport interface DropdownOptionsProps {\n  onChange: (name: string, value: string | boolean) => void;\n  options: DropdownOption[];\n  values: SelectedOptions;\n}\n\nexport const DropdownGroup: React.FunctionComponent<DropdownOptionsProps> = ({\n  onChange,\n  options,\n  values,\n}) => {\n  const onInputChange = ({ target }: { target: HTMLInputElement }) => {\n    const { name, type, checked, value: targetValue } = target;\n    const value = type === INPUT_TYPES.checkbox ? checked : targetValue;\n    onChange(name, value);\n  };\n\n  return (\n    <form className={STYLES.DropdownGroup}>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {options.map(\n            ({ label: dropdownLabel, name: dropdownName, type, items }) => (\n              <Dropdown key={dropdownLabel}>\n                <DropdownToggle\n                  caret\n                  color=\"secondary\"\n                  className={STYLES.DropDown}\n                >\n                  {dropdownLabel}\n                </DropdownToggle>\n                <DropdownMenu right>\n                  {items.map(({ name: inputName, label, url }) =>\n                    type === 'formGroup' ? (\n                      <DropdownItem key={inputName}>\n                        <FormGroup check>\n                          <Label\n                            check\n                            onClick={(event) => {\n                              event.stopPropagation();\n                            }}\n                          >\n                            <Input\n                              name={inputName}\n                              type=\"checkbox\"\n                              checked={\n                                !!values[inputName as keyof SelectedOptions]\n                              }\n                              onChange={onInputChange}\n                            />{' '}\n                            {label}\n                          </Label>\n                        </FormGroup>\n                      </DropdownItem>\n                    ) : (\n                      <DropdownItem\n                        key={inputName}\n                        onClick={() => {\n                          if (url) {\n                            onChange(dropdownName, url);\n                          }\n                        }}\n                      >\n                        {url ===\n                        values[dropdownName as keyof SelectedOptions] ? (\n                          <IoMdCheckmark />\n                        ) : (\n                          <span\n                            style={{\n                              paddingLeft: '1em',\n                              display: 'inline-block',\n                            }}\n                          />\n                        )}{' '}\n                        {inputName}\n                      </DropdownItem>\n                    )\n                  )}\n                </DropdownMenu>\n              </Dropdown>\n            )\n          )}\n        </ButtonGroup>\n      </ButtonToolbar>\n    </form>\n  );\n};\n","import maps from '../../data/maps/maps.json';\nimport { routes } from '../../data/routes/routes';\nimport { DropdownOption } from './types';\n\nexport const options: DropdownOption[] = [\n  {\n    label: 'Routes',\n    name: 'gpxUrl',\n    items: routes,\n  },\n  {\n    label: 'Layers',\n    name: 'mapUrl',\n    items: maps,\n  },\n  {\n    label: 'Options',\n    name: 'options',\n    type: 'formGroup',\n    items: [\n      // {\n      //   name: 'showElevationProfile',\n      //   label: 'Show elevation profile',\n      // },\n      {\n        name: 'showControls',\n        label: 'Show controls',\n      },\n      {\n        name: 'showMarkers',\n        label: 'Show markers',\n      },\n      {\n        name: 'showRoute',\n        label: 'Show route',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateSettings } from '../../features/settings';\nimport { RootState } from '../../store';\nimport { DropdownGroup } from '../DropdownGroup/DropdownGroup';\nimport { options } from './settingsOptions';\n\nexport const Settings: React.FunctionComponent = () => {\n  const settings = useSelector((state: RootState) => state.settings);\n  const dispatch = useDispatch();\n\n  const onSettingsChange = (name: string, value: string | boolean) => {\n    dispatch(\n      updateSettings({\n        [name]: value,\n      })\n    );\n  };\n\n  return (\n    <DropdownGroup\n      options={options}\n      values={settings}\n      onChange={onSettingsChange}\n    />\n  );\n};\n","import React, { Fragment } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Map } from '../Map/Map';\nimport { Settings } from '../Settings/Settings';\nimport STYLES from './MapPage.module.scss';\n\nexport const MapPage: React.FunctionComponent = () => (\n  <Fragment>\n    <Helmet>\n      <title>GR-20 - The Route</title>\n    </Helmet>\n    <div className={STYLES.MapPage}>\n      <Settings />\n      <Map />\n    </div>\n  </Fragment>\n);\n"],"sourceRoot":""}