{"version":3,"sources":["util/download.ts"],"names":["addGPXToZip","source","zip","a","gpxFileUrl","getUrl","fetch","gpxFileResponse","text","gpxText","fileName","split","pop","file","addPDFToZip","map","vectorSource","onLoadStart","onLoadEnd","format","resolution","option","PDF_OPTION_ALL","sortedPointsFeatures","getSortedPointFeatures","getCurrentViewPDF","getMultiStagePDF","finalPDF","output","downloadZipFile","includeGPX","includePDF","pdfFormat","pdfResolution","pdfOption","size","getSize","initialExtent","getView","calculateExtent","zipFileName","JSZip","rootZipDir","folder","generateAsync","type","content","saveAs","setSize","fit"],"mappings":"iUAQaA,EAAW,uCAAG,WACzBC,EACAC,GAFyB,qBAAAC,EAAA,yDAKC,kBADpBC,EAAaH,EAAOI,UAJD,iCAMOC,MAAMF,GANb,cAMjBG,EANiB,gBAODA,EAAgBC,OAPf,OAOjBC,EAPiB,QAQjBC,EAAWN,EAAWO,MAAM,KAAKC,QAErCV,EAAIW,KAAKH,EAAUD,GAVE,4CAAH,wDAeXK,EAAW,uCAAG,WACzBC,EACAC,EACAd,EACAe,EACAC,GALyB,2CAAAf,EAAA,6DAMzBO,EANyB,+BAMd,UACXS,EAPyB,+BAOL,KACpBC,EARyB,+BAQZ,IACbC,EATyB,+BAShBC,IAEHC,EAAuBC,YAAuBR,GAX3B,SAa6B,qDAb7B,mBAajBS,EAbiB,EAajBA,kBAAmBC,EAbF,EAaEA,iBAKzBL,IAAWC,IAlBY,kCAmBbI,EACJX,EACAI,EACAC,EACAG,EACAN,EACAC,GAzBiB,6DA2BbO,EACJV,EACAI,EACAC,EACAH,EACAC,GAhCiB,6BAiBnBS,EAjBmB,OAoCvBzB,EAAIW,KAAKH,EAAUiB,EAASC,OAAO,SApCZ,4CAAH,8DAwCXC,EAAe,uCAAG,WAC7Bd,EACAd,EACA6B,EACAC,EACAC,EACAC,EACAC,EACAjB,EACAC,GAT6B,2BAAAf,EAAA,yDAW7Bc,IAEMkB,EAAOpB,EAAIqB,UACXC,EAAgBtB,EAAIuB,UAAUC,gBAAgBJ,GAE1B,kBADpB/B,EAAaH,EAAOI,UAfG,oDAmBvBmC,EAAcpC,EAAWO,MAAM,KAAKC,MAnBb,oDAuBvBV,EAAM,IAAIuC,IACVC,EAAaxC,EAAIyC,OAAOH,IAE1BV,IAAcY,EA1BW,kCA2BrB1C,EAAYC,EAAQyC,GA3BC,YA6BzBX,IAAcW,EA7BW,kCA8BrB5B,EACJC,EACAd,EACAyC,EACAzB,EACAC,EACA,UACAc,EACAC,EACAC,GAvCyB,yBA2CPhC,EAAI0C,cAAc,CAAEC,KAAM,SA3CnB,QA2CvBC,EA3CuB,OA4C7BC,iBAAOD,EAAD,UAAaN,EAAb,SACNzB,EAAIiC,QAAQb,GACZpB,EAAIuB,UAAUW,IAAIZ,EAAe,CAAEF,SACnCjB,IA/C6B,4CAAH","file":"static/js/download-util.fe204d98.chunk.js","sourcesContent":["import { saveAs } from 'file-saver';\nimport JSZip from 'jszip';\nimport { default as OLMap } from 'ol/Map';\nimport VectorSource from 'ol/source/Vector';\nimport { PDF_OPTION_ALL } from './constants';\nimport { PDFFormat } from './types';\nimport { getSortedPointFeatures } from './util';\n\nexport const addGPXToZip = async (\n  source: VectorSource,\n  zip: JSZip\n): Promise<void> => {\n  const gpxFileUrl = source.getUrl();\n  if (typeof gpxFileUrl === 'string') {\n    const gpxFileResponse = await fetch(gpxFileUrl);\n    const gpxText = await gpxFileResponse.text();\n    const fileName = gpxFileUrl.split('/').pop();\n    if (fileName) {\n      zip.file(fileName, gpxText);\n    }\n  }\n};\n\nexport const addPDFToZip = async (\n  map: OLMap,\n  vectorSource: VectorSource,\n  zip: JSZip,\n  onLoadStart: () => void,\n  onLoadEnd: () => void,\n  fileName = 'map.pdf',\n  format: PDFFormat = 'a4',\n  resolution = 150,\n  option = PDF_OPTION_ALL\n): Promise<void> => {\n  const sortedPointsFeatures = getSortedPointFeatures(vectorSource);\n\n  const { getCurrentViewPDF, getMultiStagePDF } = await import(\n    /* webpackChunkName: \"pdf-util\" */ './pdf'\n  );\n\n  const finalPDF =\n    option === PDF_OPTION_ALL\n      ? await getMultiStagePDF(\n          map,\n          format,\n          resolution,\n          sortedPointsFeatures,\n          onLoadStart,\n          onLoadEnd\n        )\n      : await getCurrentViewPDF(\n          map,\n          format,\n          resolution,\n          onLoadStart,\n          onLoadEnd\n        );\n\n  if (finalPDF) {\n    zip.file(fileName, finalPDF.output('blob'));\n  }\n};\n\nexport const downloadZipFile = async (\n  map: OLMap,\n  source: VectorSource,\n  includeGPX: boolean,\n  includePDF: boolean,\n  pdfFormat: PDFFormat,\n  pdfResolution: number,\n  pdfOption: string,\n  onLoadStart: () => void,\n  onLoadEnd: () => void\n): Promise<void> => {\n  onLoadStart();\n\n  const size = map.getSize();\n  const initialExtent = map.getView().calculateExtent(size);\n  const gpxFileUrl = source.getUrl();\n  if (typeof gpxFileUrl !== 'string') {\n    return;\n  }\n  const zipFileName = gpxFileUrl.split('/').pop();\n  if (!zipFileName) {\n    return;\n  }\n  const zip = new JSZip();\n  const rootZipDir = zip.folder(zipFileName);\n\n  if (includeGPX && rootZipDir) {\n    await addGPXToZip(source, rootZipDir);\n  }\n  if (includePDF && rootZipDir) {\n    await addPDFToZip(\n      map,\n      source,\n      rootZipDir,\n      onLoadStart,\n      onLoadEnd,\n      'foo.pdf',\n      pdfFormat,\n      pdfResolution,\n      pdfOption\n    );\n  }\n\n  const content = await zip.generateAsync({ type: 'blob' });\n  saveAs(content, `${zipFileName}.zip`);\n  map.setSize(size);\n  map.getView().fit(initialExtent, { size });\n  onLoadEnd();\n};\n"],"sourceRoot":""}